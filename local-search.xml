<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>KMP字符串</title>
    <link href="/2021/07/20/KMP%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2021/07/20/KMP%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="KMP字符串"><a href="#KMP字符串" class="headerlink" title="KMP字符串"></a>KMP字符串</h2><p>KMP算法是基础算法中的一个难点，虽然Acwing中已经有简短易记的代码，但是如果不理解KMP原理，在做一些变形题的时候还是会很困难。</p><p>具体的过程可以参照知乎的高赞回答，这里写一些自己的补充。</p><h3 id="1-next数组"><a href="#1-next数组" class="headerlink" title="1.next数组"></a>1.next数组</h3><p><code>next</code>数组存在两种类型</p><ol><li>下标从1开始 即<code>next[0]=0</code></li><li>下标从0开始  即<code>next[0]=-1</code></li></ol><p>这两种类型的本质是一样的</p><p>在第<strong>1</strong>种next数组中:</p><blockquote><p><code>next[i]=j</code> 意为 ``p[1,j]=p[i-j+1,i]`</p></blockquote><p>也就是说，如果出现了下图情况的不匹配</p><p><img src="img/KMP%E5%AD%97%E7%AC%A6%E4%B8%B2/1.png" alt="image-20210718213811721"></p><p>就能使<code>j=next[j]</code>,从而开始新一轮的匹配</p><p>求这种next数组的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>,j = <span class="hljs-number">0</span>;j &lt;= n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span>(j &amp;&amp; p[i] != p[j+<span class="hljs-number">1</span>]) j = ne[j];<br>    <span class="hljs-keyword">if</span>(p[i] == p[j + <span class="hljs-number">1</span>]) j++;<br>    ne[i] = j;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于第<strong>2</strong>种next数组的相关问题，可以参照这篇博客</p><p><a href="https://blog.csdn.net/m0_37482190/article/details/86667059">算法：next数组的求法详解_进阶的小小白的博客-CSDN博客_next数组</a></p><h3 id="2-匹配的过程"><a href="#2-匹配的过程" class="headerlink" title="2.匹配的过程"></a>2.匹配的过程</h3><p>这里以下标从0开始的<code>next</code>数组为例</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>,j = <span class="hljs-number">0</span>;i &lt;= m;i ++)<br>&#123;<br>    <span class="hljs-keyword">while</span>(j &amp;&amp; s[i] != p[j+<span class="hljs-number">1</span>]) <span class="hljs-comment">//j没有退回起点，并且s[i]与p[j+1]不能匹配</span><br>        j = ne[j];<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    上面的循环结束后，有两种情况</span><br><span class="hljs-comment">  1. j=0 即 退无可退了</span><br><span class="hljs-comment">      2. 成功进行了匹配</span><br><span class="hljs-comment">    */</span><br>    <br>    <span class="hljs-keyword">if</span>(s[i] == p[j+<span class="hljs-number">1</span>]) j++;  <span class="hljs-comment">//成功匹配后，j就能移动到下一个位置</span><br>    <br>    <span class="hljs-keyword">if</span>(j == n)<br>    &#123;<br>        <span class="hljs-comment">//匹配成功</span><br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>KMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT_ADV 刷题笔记 0X0001</title>
    <link href="/2021/07/20/PAT_ADV%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B00x0001/"/>
    <url>/2021/07/20/PAT_ADV%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B00x0001/</url>
    
    <content type="html"><![CDATA[<h2 id="刷题笔记"><a href="#刷题笔记" class="headerlink" title="刷题笔记"></a>刷题笔记</h2><p>2021.7.12—2021.7.14</p><h3 id="1084-坏掉的键盘"><a href="#1084-坏掉的键盘" class="headerlink" title="1084 坏掉的键盘"></a>1084 坏掉的键盘</h3><p>关于string遍历的问题，在这个样例中，虽然在IDE中查找b[10]没有任何值，但是cout&lt;&lt;b[10]却不会有任何问题，cout&lt;&lt;b[11]就会报错</p><p>为了保险起见，还是在b串的末尾加上了’#’</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">7_This_is_a_test</span><br><span class="hljs-comment">_hs_s_a_es</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">bool</span> los[<span class="hljs-number">200</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string a, b;<br>cin &gt;&gt; a &gt;&gt; b;<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//有可能第一个指针还没遍历完的时候，第二个指针就已经遍历完了,所以在第二个string后边加上了&#x27;#&#x27;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br><span class="hljs-keyword">char</span> x = <span class="hljs-built_in">toupper</span>(a[i]), y = <span class="hljs-built_in">toupper</span>(b[j]);<br><span class="hljs-keyword">if</span> (x == y) &#123;<br>j++;<br><span class="hljs-keyword">if</span> (j == <span class="hljs-number">9</span>)<br><span class="hljs-built_in">getchar</span>();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (!los[x]) cout &lt;&lt; x, los[x] = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1108-求平均值"><a href="#1108-求平均值" class="headerlink" title="1108 求平均值"></a>1108 求平均值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-keyword">float</span> sum;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string a[N];<br><span class="hljs-keyword">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>cin &gt;&gt; a[i];<br><span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">size_t</span> idx;<br><span class="hljs-keyword">float</span> t;<br><span class="hljs-keyword">try</span> &#123;<br>t = <span class="hljs-built_in">stof</span>(a[i], &amp;idx);  <span class="hljs-comment">//这里的idx能指向成功转化的最后位数的下一个地址</span><br>&#125;<br><span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (...) &#123;<br>flag = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (idx &lt; a[i].<span class="hljs-built_in">size</span>()) flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">-1000</span> || t&gt;<span class="hljs-number">1000</span>) flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">int</span> k = a[i].<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-keyword">if</span> (k != <span class="hljs-number">-1</span> &amp;&amp; a[i].<span class="hljs-built_in">size</span>() - k &gt; <span class="hljs-number">3</span>) flag = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">if</span> (flag) cnt++, sum += t;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERROR: %s is not a legal number\n&quot;</span>, a[i].<span class="hljs-built_in">c_str</span>());<br><br>&#125;<br><br><span class="hljs-keyword">if</span> (cnt &gt; <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The average of %d numbers is %.2lf\n&quot;</span>, cnt, sum / cnt);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The average of 1 number is %.2lf\n&quot;</span>, sum);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;The average of 0 numbers is Undefined&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这题涉及到了很多库函数</p><ul><li><p><code>stoi()</code>,<code>stof()</code>这两个函数能把<code>string</code>转化为<code>int</code>/<code>float</code></p><ul><li>在字符串不合法的情况下，它们能抛出异常</li><li>能包含两个参数，第二个参数&amp;idx能带出 成功转换的最后一位的下一个地址</li></ul></li><li><p>使用<code>try&#123;&#125; catch(...)&#123;&#125;</code>语句捕捉异常，记为不合法数字</p><ul><li><code>catch(...)</code> 捕捉所有类型的异常</li></ul></li><li><p>string类型的<code> .find(x)</code>函数 能在指定字符串中寻找第一个x的下标，并将其返回。如果在字符串中找不到x，那么返回值为-1</p></li></ul><p>c++ 中的try catch 语句</p><p>size_t</p><h3 id="1124-微博转发抽奖"><a href="#1124-微博转发抽奖" class="headerlink" title="1124 微博转发抽奖"></a>1124 微博转发抽奖</h3><p>这题用到了unordered_set来判重</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1010</span>;<br>stringname[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> m, n, s;<br>cin &gt;&gt; m &gt;&gt; n &gt;&gt; s; <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) <span class="hljs-comment">//这里要注意，s从1开始，所以i也要从1开始</span><br>cin &gt;&gt; name[i];<br><br>unordered_set&lt;string&gt; hash;<br><span class="hljs-keyword">int</span> i = s;<br><span class="hljs-keyword">while</span>(i&lt;=m)<br>&#123;<br><span class="hljs-keyword">if</span> (hash.<span class="hljs-built_in">count</span>(name[i])) i++;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; name[i] &lt;&lt; endl;<br>hash.<span class="hljs-built_in">insert</span>(name[i]);<br>i += n;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (hash.<span class="hljs-built_in">empty</span>()) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Keep going...&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1125-PAT单位排行"><a href="#1125-PAT单位排行" class="headerlink" title="1125 PAT单位排行"></a>1125 PAT单位排行</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">School</span></span><br><span class="hljs-class">&#123;</span><br>    string name;<br>    <span class="hljs-keyword">int</span> cnt;<br>    <span class="hljs-keyword">double</span> sum;<br><br>    <span class="hljs-built_in">School</span>() : <span class="hljs-built_in">cnt</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">sum</span>(<span class="hljs-number">0</span>) &#123;&#125;<br><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-keyword">const</span> School&amp; t) <span class="hljs-keyword">const</span> <span class="hljs-comment">//运算符重载，绝绝子</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (sum != t.sum) <span class="hljs-keyword">return</span> sum &gt; t.sum;<br>        <span class="hljs-keyword">if</span> (cnt != t.cnt) <span class="hljs-keyword">return</span> cnt &lt; t.cnt;<br>        <span class="hljs-keyword">return</span> name &lt; t.name;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    unordered_map&lt;string, School&gt; hash;<br><br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        string id, sch;<br>        <span class="hljs-keyword">double</span> grade;<br>        cin &gt;&gt; id &gt;&gt; grade &gt;&gt; sch;<br><br>        <span class="hljs-comment">//将所有的大写字母都转化为小写字母</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; c : sch)<br>            c = <span class="hljs-built_in">tolower</span>(c);<br><br>        <span class="hljs-keyword">if</span> (id[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;B&#x27;</span>) grade = grade / <span class="hljs-number">1.5</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (id[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;T&#x27;</span>) grade = grade * <span class="hljs-number">1.5</span>;<br><br>        hash[sch].sum += grade;<br>        hash[sch].cnt++;<br>        hash[sch].name = sch;<br>    &#125;<br><br>    vector&lt;School&gt; schools;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> item : hash) &#123;<br>        item.second.sum = (<span class="hljs-keyword">int</span>)(item.second.sum + <span class="hljs-number">1e-8</span>); <span class="hljs-comment">//需要注意这里的second，这里的second指的是&lt;string,School&gt;中的second</span><br>        schools.<span class="hljs-built_in">push_back</span>(item.second);<br>    &#125;<br><br>    <span class="hljs-comment">//进行多关键字排序</span><br>    <span class="hljs-built_in">sort</span>(schools.<span class="hljs-built_in">begin</span>(), schools.<span class="hljs-built_in">end</span>());<br>    cout &lt;&lt; schools.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br><br>    <span class="hljs-keyword">int</span> rank = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; schools.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">auto</span> s = schools[i];<br>        <span class="hljs-keyword">if</span> (i &amp;&amp; s.sum != schools[i - <span class="hljs-number">1</span>].sum) rank = i + <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s %d %d\n&quot;</span>, rank, s.name.<span class="hljs-built_in">c_str</span>(), (<span class="hljs-keyword">int</span>)s.sum, s.cnt);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>值得注意得点：</p><ul><li><p>c++进行除法时，可能存在精度问题，比如 /1.5 时，出现了 2.99999999  取整后为2</p><ul><li>解决方案：在除法后加上经验值 <code>eps</code> (一般为1e-8)</li></ul></li><li><p>使用<code>unordered_map</code> 把学校名字映射到一个结构体</p></li><li><p>重载运算符，进行多关键字排序</p></li></ul><h3 id="1153-解码PAT准考证"><a href="#1153-解码PAT准考证" class="headerlink" title="1153 解码PAT准考证"></a>1153 解码PAT准考证</h3><h3 id="1058-霍格沃茨的A-B"><a href="#1058-霍格沃茨的A-B" class="headerlink" title="1058 霍格沃茨的A + B"></a>1058 霍格沃茨的A + B</h3><h3 id="1629-延迟的回文数"><a href="#1629-延迟的回文数" class="headerlink" title="1629 延迟的回文数"></a>1629 延迟的回文数</h3><h3 id="1579-插入还是归并"><a href="#1579-插入还是归并" class="headerlink" title="1579 插入还是归并"></a>1579 插入还是归并</h3><h3 id="1484-最佳排名"><a href="#1484-最佳排名" class="headerlink" title="1484 最佳排名"></a>1484 最佳排名</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">使用vector存各科成绩</span><br><span class="hljs-comment">*/</span><br>unordered_map&lt;string, vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; grades;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; q[<span class="hljs-number">4</span>]; <span class="hljs-comment">//A:q[0] C:q[1] M:q[2] E:q[3] 用于得到排名</span><br><br><br><span class="hljs-comment">//二分查找分数x在数组a中的下标</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_rank</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; a, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (l &lt; r)<br>&#123;<br><span class="hljs-keyword">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (a[mid] &lt;= x) l = mid;<br><span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> a.<span class="hljs-built_in">size</span>() - r;<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n, m;<br>cin &gt;&gt; n &gt;&gt; m;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>string id;<br><span class="hljs-keyword">int</span> t[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>cin &gt;&gt; id;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>&#123;<br>cin &gt;&gt; t[j];<br>t[<span class="hljs-number">0</span>] += t[j];<br>&#125;<br>t[<span class="hljs-number">0</span>] = <span class="hljs-built_in">round</span>(t[<span class="hljs-number">0</span>] / <span class="hljs-number">3.0</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>&#123;<br>q[j].<span class="hljs-built_in">push_back</span>(t[j]);<br>grades[id].<span class="hljs-built_in">push_back</span>(t[j]);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br><span class="hljs-built_in">sort</span>(q[i].<span class="hljs-built_in">begin</span>(), q[i].<span class="hljs-built_in">end</span>());<br><br><br><span class="hljs-comment">//处理查询</span><br><span class="hljs-keyword">char</span> names[] = <span class="hljs-string">&quot;ACME&quot;</span>;<br><span class="hljs-keyword">while</span> (m--)<br>&#123;<br>string id;<br>cin &gt;&gt; id;<br><span class="hljs-keyword">if</span> (grades.<span class="hljs-built_in">count</span>(id) == <span class="hljs-number">0</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;N/A&quot;</span>);<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">int</span> res = n + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">char</span> c;<br><span class="hljs-comment">//根据id查找最好的名次</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br><span class="hljs-keyword">int</span> rank = <span class="hljs-built_in">get_rank</span>(q[i], grades[id][i]);<br><span class="hljs-keyword">if</span> (rank &lt; res)<br>&#123;<br>res = rank;<br>c = names[i];<br>&#125;<br>&#125;<br>cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; c &lt;&lt; endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>主要注意的点：</strong></p><ol><li>这题使用<code>unordered_map&lt;string,vector&lt;int&gt;&gt;</code> 实现id到成绩的映射</li><li>在给定分数的情况下，求排名的方法<ul><li><ol><li>二分法</li></ol></li><li><ol start="2"><li>模拟法</li></ol></li></ul></li><li>很久没有做二分的题目了，这里再次复习一下二分中需要注意的点：<ul><li>如果希望得到的下标是左区间的右端点，使用<code>mid=(l+r+1)</code>，区间划分为<code>[l,mid] </code>和<code>[mid+1,r]</code><br> 如果希望得到的是右区间的左端点，使用<code>mid=(l+r)/2</code>,区间划分为<code>[l,mid-1]</code>和<code>[mid,r]</code></li></ul></li></ol><h3 id="1499-数字图书馆"><a href="#1499-数字图书馆" class="headerlink" title="1499 数字图书馆"></a>1499 数字图书馆</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-comment">/*比较复杂的信息存在结构体里比较方便*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Book</span> &#123;</span><br>string id, name, author;<br>set&lt;string&gt; keywords;<br>string publisher, year;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n, m;<br>cin &gt;&gt; n;<br>vector&lt;Book&gt; books;<br><span class="hljs-keyword">while</span> (n--)<br>&#123;<br>string id, name, author;<br>cin &gt;&gt; id;<br><span class="hljs-built_in">getchar</span>(); <span class="hljs-comment">//当想用getline的时候，需要把上一行的回车读取掉,否则读取的是一个回车</span><br><span class="hljs-built_in">getline</span>(cin, name);<br><span class="hljs-built_in">getline</span>(cin, author);<br>string line;<br><span class="hljs-built_in">getline</span>(cin, line);<br><span class="hljs-function">stringstream <span class="hljs-title">ssin</span><span class="hljs-params">(line)</span></span>;<br>string keyword;<br>set&lt;string&gt; keywords;<br><span class="hljs-keyword">while</span> (ssin &gt;&gt; keyword)<br>keywords.<span class="hljs-built_in">insert</span>(keyword);<br>string publisher, year;<br><span class="hljs-built_in">getline</span>(cin, publisher);<br>cin &gt;&gt; year;<br><br>books.<span class="hljs-built_in">push_back</span>(&#123; id, name, author, keywords, publisher, year &#125;);<br><br>&#125;<br>cin &gt;&gt; m;<br><span class="hljs-built_in">getchar</span>();<br>string line;<br><span class="hljs-keyword">while</span> (m--)<br>&#123;<br><span class="hljs-built_in">getline</span>(cin, line);<br>cout &lt;&lt; line &lt;&lt; endl;<br>string info = line.<span class="hljs-built_in">substr</span>(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">char</span> t = line[<span class="hljs-number">0</span>];<br>vector&lt;string&gt; res;<br><span class="hljs-keyword">if</span> (t == <span class="hljs-string">&#x27;1&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; book : books)<br><span class="hljs-keyword">if</span> (book.name == info)<br>res.<span class="hljs-built_in">push_back</span>(book.id);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t == <span class="hljs-string">&#x27;2&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; book : books)<br><span class="hljs-keyword">if</span> (book.author == info)<br>res.<span class="hljs-built_in">push_back</span>(book.id);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t == <span class="hljs-string">&#x27;3&#x27;</span>)<br>&#123;<br><span class="hljs-comment">/*查询关键字*/</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; book : books)<br>&#123;<br><span class="hljs-keyword">if</span> (book.keywords.<span class="hljs-built_in">count</span>(info))<br>res.<span class="hljs-built_in">push_back</span>(book.id);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t == <span class="hljs-string">&#x27;4&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; book : books)<br><span class="hljs-keyword">if</span>(book.publisher==info)<br>res.<span class="hljs-built_in">push_back</span>(book.id);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; book : books)<br><span class="hljs-keyword">if</span>(book.year==info)<br>res.<span class="hljs-built_in">push_back</span>(book.id);<br>&#125;<br><br><span class="hljs-keyword">if</span> (res.<span class="hljs-built_in">empty</span>()) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Not Found&quot;</span>);<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">sort</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> id : res) cout &lt;&lt; id &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>难点</strong></p><ol><li>数据的输入<ul><li>使用在读取包含空格的字符串时，需要使用<code>getline(cin,string)</code> <ul><li>使用getline()时，需要注意上一格的回车是否已经被读入如果没有，就需要使用getchar()读取上一行的回车</li></ul></li></ul></li><li>数据的存储<ul><li>使用结构体存储数据</li><li>使用set存储关键字（比较易于查找这个关键字）</li></ul></li></ol><h3 id="1505-列表排序"><a href="#1505-列表排序" class="headerlink" title="1505 列表排序"></a>1505 列表排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Row</span>&#123;</span><br>    string id,name;<br>    <span class="hljs-keyword">int</span> grade;<br>    <span class="hljs-comment">//由于重载只能重载一次，在这种3个排序的情况下不是很方便</span><br>&#125;rows[N];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(Row a,Row b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.id&lt;b.id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp2</span><span class="hljs-params">(Row a,Row b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.name!=b.name) <span class="hljs-keyword">return</span> a.name&lt;b.name;<br>    <span class="hljs-keyword">return</span> a.id&lt;b.id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp3</span><span class="hljs-params">(Row a,Row b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.grade!=b.grade) <span class="hljs-keyword">return</span> a.grade&lt;b.grade;<br>    <span class="hljs-keyword">return</span> a.id&lt;b.id;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> c;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n,&amp;c);<br>    <br>    <span class="hljs-keyword">char</span> id[<span class="hljs-number">10</span>],name[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;    <br>        <span class="hljs-keyword">int</span> grade;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s%d&quot;</span>,id,name,&amp;grade);<br>        rows[i]=&#123;id,name,grade&#125;;<br>    &#125;      <br>    <span class="hljs-keyword">if</span>(c==<span class="hljs-number">1</span>) <span class="hljs-built_in">sort</span>(rows,rows+n,cmp1);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-number">2</span>) <span class="hljs-built_in">sort</span>(rows,rows+n,cmp2);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-number">3</span>) <span class="hljs-built_in">sort</span>(rows,rows+n,cmp3);<br>    <br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %s %d\n&quot;</span>,rows[i].id.<span class="hljs-built_in">c_str</span>(),rows[i].name.<span class="hljs-built_in">c_str</span>(),rows[i].grade);<br>        <br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个题目在算法上没有难度，但是涉及到了<code>cin</code> 、<code>cout</code>和<code>scanf</code> 、<code>printf</code>之间的效率问题</p><p>使用<code>cin</code>以及<code>cout</code>处理输入输出，在输入数据量大于100000的情况下容易超时</p><p>可以考虑更换为<code>scanf</code>和<code>printf</code>来处理输入输出</p><p><strong>值得注意的点</strong></p><ol><li><p>如果更换为<code>scanf</code>和<code>printf</code>处理输入输出，就一定要更换全部的<code>scanf</code>和<code>printf</code>，不然提速不明显</p><ul><li>原因：<code>cin</code> 、<code>cout</code>如果需要与<code>scanf</code>和<code>printf</code>同步会显著降低效率</li></ul></li><li><p><code>scanf</code>读入<code>string</code>的方法：引入中间数组，然后给字符串赋值(不能直接使用<code>.c_str()</code>方法读取值!!!)</p></li><li><p><code>printf</code>输出<code>string</code>的方法：使用<code>.c_str()</code>方法</p></li></ol><h3 id="1523-学生课程表"><a href="#1523-学生课程表" class="headerlink" title="1523 学生课程表"></a>1523 学生课程表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>unordered_map&lt;string, vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; students;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n, k;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);<br><br><span class="hljs-comment">/*unordered_map实现对学生选课信息的映射*/</span><br><br><span class="hljs-keyword">while</span> (k--)<br>&#123;<br><span class="hljs-keyword">int</span> a, b;<span class="hljs-comment">//a课程有b个学生</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; b; i++)<br>&#123;<br>string name;<br><span class="hljs-keyword">char</span> temp[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, temp);<br>name = temp;<br>students[name].<span class="hljs-built_in">push_back</span>(a);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">while</span> (n--)<br>&#123;<br>string query;<br><span class="hljs-keyword">char</span> temp[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, temp);<br>query=temp;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d&quot;</span>, query.<span class="hljs-built_in">c_str</span>(), students[query].<span class="hljs-built_in">size</span>());<br><span class="hljs-built_in">sort</span>(students[query].<span class="hljs-built_in">begin</span>(),students[query].<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> c : students[query])<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, c);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这题又踩坑了，<del>直接使用了<code>.c_str( )</code>进行<code>string</code>的赋值</del> 。正确的做法应该是引入一个中间<code>char</code>数组,然后将<code>char</code>数组赋值给<code>string</code></p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAT_ADV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯算法笔记&lt;6&gt; 数论基础</title>
    <link href="/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-6-%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-6-%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>   质数，最大公约数等等和处理数字有关的题目会经常出现在算法题中。对于常见的处理方式，应该背一个最优解的模板。</p><h4 id="1-求最大公约数"><a href="#1-求最大公约数" class="headerlink" title="1.求最大公约数"></a>1.求最大公约数</h4><pre><code>最大公约数：也称最大公约数、最大公因子，指两个或多个整数共有约数中最大的一个。</code></pre><p>在实际做题时，辗转相除法(欧几里得算法)是最大公约数的一种常用的求法</p><p>由于(a,b)=(b,a%b)<br>能使用如下算法计算最大公约数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b ,a % b) : a;<br><span class="hljs-comment">//0和任何数的最大公约数都是它本身</span><br><span class="hljs-comment">//如果b是非零，就返回gcd(b ,a % b)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>例：<br>等差数列<br>原题链接：<a href="https://www.acwing.com/problem/content/1248/">Acwing.1246</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b, a % b) : a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q[i]);<br><br><span class="hljs-built_in">sort</span>(q, q + n);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">如果这是一个等差数列，将q数组排序之后，一定能将各项表示为 a+k1b a+k2b  ... a+knb </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">那么项数就为（a末-a初）/d + 1 </span><br><span class="hljs-comment">为了使得上述得数列最短，就需要使(a末-a初)尽可能地小，d尽可能地大</span><br><span class="hljs-comment">a末的最小值是q[n-1]</span><br><span class="hljs-comment">a初的最大值是q[0]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">d的最大值是各项与首项的差的最大公约数</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">int</span> d = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>d = <span class="hljs-built_in">gcd</span>(d, q[i]-q[<span class="hljs-number">0</span>]);<br><br><span class="hljs-keyword">if</span> (d == <span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,n);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,(q[n - <span class="hljs-number">1</span>] - q[<span class="hljs-number">0</span>]) / d + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="筛法求素数"><a href="#筛法求素数" class="headerlink" title="筛法求素数"></a>筛法求素数</h4><pre><code>质数是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数。</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> prime[N],cnt; <span class="hljs-comment">//存所有素数</span><br><span class="hljs-keyword">bool</span> st[N];  <span class="hljs-comment">//当前数有没有被筛过</span><br><span class="hljs-keyword">int</span> min[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i &lt;= n;i ++)<br>&#123;<br><span class="hljs-keyword">if</span>(!st[i]) minp[i]=i,primes[cnt++]=i;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;primes[j]*i&lt;=n;j++)<br>&#123;<br>st[primes[j]*i]=<span class="hljs-literal">true</span>;<br>minp[primes[j]*i]=primes[j]<br><span class="hljs-keyword">if</span>(i%primes[j]==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="质数与合数"><a href="#质数与合数" class="headerlink" title="质数与合数"></a>质数与合数</h4><p>质数与合数是针对从2开始的整数定义的</p><p>质数：在大于1的整数中，如果只包含1和本身这两个约数，就被成为质数或者叫素数<br>（1） 质数的判定：试除法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>)  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n / i; i++)<br><span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的点： 使用 i &lt;= n / i 能加快处理速度，同时防止出现溢出</p><h4 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h4><p>试除法</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯算法笔记&lt;1&gt; 二分</title>
    <link href="/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-1-%E4%BA%8C%E5%88%86/"/>
    <url>/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-1-%E4%BA%8C%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="二分算法的例题"><a href="#二分算法的例题" class="headerlink" title="二分算法的例题"></a>二分算法的例题</h1><hr><p>给定一个按照升序排列的长度为n的整数数组，以及 q 个查询。</p><p>对于每个查询，返回一个元素k的起始位置和终止位置（位置从0开始计数）。</p><p>如果数组中不存在该元素，则返回“-1 -1”。</p><p>输入格式<br>第一行包含整数n和q，表示数组长度和询问个数。</p><p>第二行包含n个整数（均在1~10000范围内），表示完整数组。</p><p>接下来q行，每行包含一个整数k，表示一个询问元素。</p><p>输出格式<br>共q行，每行包含两个整数，表示所求元素的起始位置和终止位置。</p><p>如果数组中不存在该元素，则返回“-1 -1”。</p><p>数据范围<br>1≤n≤100000<br>1≤q≤10000<br>1≤k≤10000<br>输入样例：<br>6 3<br>1 2 2 3 3 4<br>3<br>4<br>5<br>输出样例：<br>3 4<br>5 5<br>-1 -1</p><hr><p>二分是一个基础算法，但是如果掌握不好，很容易写出各种各样的死循环<br>这道题是二分算法的一个模板题<br>我的代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include&lt;cstdio&gt;</span><br><span class="hljs-comment">#include&lt;iostream&gt;</span><br>using namespace std;<br>const <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> <span class="hljs-string">q[N]</span>;<br><br><span class="hljs-keyword">int</span> main()<br>&#123;<br><br><span class="hljs-keyword">int</span> n, m;<br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;<span class="hljs-string">q[i]</span>);<br>&#125;<br><br><span class="hljs-keyword">int</span> input;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>&#123;<br>cin &gt;&gt; input;<br><br><span class="hljs-regexp">/*开始对左端点进行二分*/</span><br><span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> mid;<br><span class="hljs-keyword">while</span> (l &lt; r)<br>&#123;<br>mid = (l + r) / <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-string">q[mid]</span> &lt; input)<br>l = mid+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">q[mid]</span> &gt;= input)<br>r = mid;<br>&#125;<br><br><span class="hljs-keyword">if</span> (input == <span class="hljs-string">q[l]</span>)<br>cout &lt;&lt; l &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;-1 &quot;</span>;<br><br><span class="hljs-regexp">/*开始对右端点进行二分*/</span><br>l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (l &lt; r)<br>&#123;<br>mid = (l + r + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-string">q[mid]</span> &lt;= input)<br>l = mid;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">q[mid]</span> &gt; input)<br>r = mid-<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (input == <span class="hljs-string">q[r]</span>)<br>cout &lt;&lt; r &lt;&lt; endl;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span> &lt;&lt; endl;<br><br><br>&#125;<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这道题体现了二分算法中两个需要特别注意的地方</p><h3 id="1-进入while循环时，mid赋值为-l-r-2-还是-l-r-1-2-（即选取二分mid时，到底时向上取整还是向下取整的问题）"><a href="#1-进入while循环时，mid赋值为-l-r-2-还是-l-r-1-2-（即选取二分mid时，到底时向上取整还是向下取整的问题）" class="headerlink" title="1.进入while循环时，mid赋值为 (l+r)/2 还是 (l+r+1)/2   （即选取二分mid时，到底时向上取整还是向下取整的问题）"></a>1.进入while循环时，mid赋值为 <strong>(l+r)/2</strong> 还是 <strong>(l+r+1)/2</strong>   （即选取二分mid时，到底时向上取整还是向下取整的问题）</h3><h3 id="2-由于二分的区间是闭区间，所以在划分区间的时候可以划分为-l-mid-mid-1-r-或者-l-mid-1-mid-r"><a href="#2-由于二分的区间是闭区间，所以在划分区间的时候可以划分为-l-mid-mid-1-r-或者-l-mid-1-mid-r" class="headerlink" title="2.由于二分的区间是闭区间，所以在划分区间的时候可以划分为[l,mid][mid+1,r]或者[l,mid-1] [mid,r]"></a>2.由于二分的区间是闭区间，所以在划分区间的时候可以划分为[l,mid][mid+1,r]或者[l,mid-1] [mid,r]</h3><hr><p>1.设想数组中只有1和2  此时l=0，r=1，若使用向上取整，则mid=1，若使用向下取整，mid=0<br>如果希望通过二分获取元素1的下标，就必须要使mid=0，这样才能让r赋值为mid，从而避免死循环</p><p>同理如果希望通过二分获取元素2的下标，就必须要mid=1</p><p>总结下来，如果希望得到的下标是左区间的右端点，就需要使用mid=(l+r+1)向上取整<br>如果希望得到的是右区间的左端点，就需要使用mid=(l+r)/2进行向下取整 </p><hr><p>2.如果希望获取的是左区间的右端点，就需要在划分区间时划分为[l,mid] 和[mid+1,r]<br>  如果希望获取的是右区间的左端点，就需要划分为[l,mid-1]和[mid,r]</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯算法笔记&lt;2&gt; 前缀和</title>
    <link href="/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-2-%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <url>/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-2-%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="k倍区间"><a href="#k倍区间" class="headerlink" title="k倍区间"></a>k倍区间</h1><p>给定一个长度为 N 的数列，A1,A2,…AN，如果其中一段连续的子序列 Ai,Ai+1,…Aj 之和是 K 的倍数，我们就称这个区间 [i,j] 是 K 倍区间。</p><p>你能求出数列中总共有多少个 K 倍区间吗？</p><p>输入格式<br>第一行包含两个整数 N 和 K。</p><p>以下 N 行每行包含一个整数 Ai。</p><p>输出格式<br>输出一个整数，代表 K 倍区间的数目。</p><p>数据范围<br>1≤N,K≤100000,<br>1≤Ai≤100000<br>输入样例：<br>5 2<br>1<br>2<br>3<br>4<br>5<br>输出样例：<br>6</p><p>首先考虑暴力算法,枚举所有的区间，并统计符合要求的区间数量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> q[N];<br><span class="hljs-keyword">int</span> cnt;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n, k;<br>cin &gt;&gt; n &gt;&gt; k;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q[i]);<br><br><span class="hljs-comment">/*暴力做法*/</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)  <span class="hljs-comment">//i为区间的右端点</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) <span class="hljs-comment">//j为区间的左端点</span><br>&#123;<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = j; y &lt;= i; y++)<br>&#123;<br>sum += q[y];<br>&#125;<br><span class="hljs-keyword">if</span> (sum % k == <span class="hljs-number">0</span>)<br>cnt++;<br>&#125;<br>&#125;<br><br>cout &lt;&lt; cnt;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>很显然，上面的做法会超时，只能得到少部分分数，需要进行优化<br>在上面的算法中，使用到了区间的和，所以考虑使用前缀和进行优化<br>在使用前缀和的过程中有两个需要注意的点<br>1.需要注意 s[n]=s[n-1]+q[n]时可能出现数组越界，故要从1开始进行循环<br>2.前缀和数组可能很大以至于爆int，故使用long long 进行存储更为稳妥</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> q[N];<br><span class="hljs-keyword">int</span> s[N];<br><span class="hljs-keyword">int</span> cnt;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n, k;<br>cin &gt;&gt; n &gt;&gt; k;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q[i]);<br><br><span class="hljs-comment">/*前缀和初始化*/</span>  <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>s[i] = s[i - <span class="hljs-number">1</span>] + q[i];<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)  <span class="hljs-comment">//i为区间的右端点</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) <span class="hljs-comment">//j为区间的左端点</span><br>&#123;<br><br><span class="hljs-comment">/*使用前缀和进行优化*/</span><br><span class="hljs-keyword">int</span> sum = s[i] - s[j - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (sum % k == <span class="hljs-number">0</span>)<br>cnt++;<br>&#125;<br>&#125;<br><br>cout &lt;&lt; cnt;<br>&#125;<br></code></pre></td></tr></table></figure><p>在使用前缀和进行优化之后，时间复杂度依然偏高，需要进一步优化<br>观察下面的这重循环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) <span class="hljs-comment">//j为区间的左端点</span><br> &#123;<br><br><span class="hljs-comment">/*使用前缀和进行优化*/</span><br><span class="hljs-keyword">int</span> sum = s[i] - s[j - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (sum % k == <span class="hljs-number">0</span>)<br>cnt++;<br> &#125;<br></code></pre></td></tr></table></figure><p>其实质是在寻找 对于每个固定的右端点i，在s[0]到s[i-1]中，有多少个数与k的模与s[i]%k相等<br>所以可以考虑开一个数组cnt[N]用于存储s[0]到s[i-1]中，对应余数的数量<br>优化后的代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>  q[N];<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>  s[N];<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> cnt[N]; <br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>  res;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n, k;<br>cin &gt;&gt; n &gt;&gt; k;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;q[i]);<br><br><span class="hljs-comment">/*前缀和初始化*/</span>  <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>s[i] = s[i - <span class="hljs-number">1</span>] + q[i];<br><br><span class="hljs-comment">//由于s[0]%k==0,所以在循环之前cnt[0]已经有一个数s[0]了，所以将cnt[0]置为1</span><br>cnt[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)  <span class="hljs-comment">//i为区间的右端点</span><br>&#123;<br><span class="hljs-comment">/*这一重循环的作用即寻找区间s[0]到s[i-1]中有多少数除以k的余数与s[i]相同*/</span><br>res += cnt[s[i]%k];<br>cnt[s[i] % k]++;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">for (int j = 1; j &lt;= i; j++) //j为区间的左端点</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">int sum = s[i] - s[j - 1];</span><br><span class="hljs-comment">if (sum % k == 0)</span><br><span class="hljs-comment">res++;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br>&#125;<br><br>cout &lt;&lt; res;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的最后一次优化，脱离了解题的思路本身，直接使用了效果相同但是时间复杂度更低的代码进行替换。这种优化思路非常赞</p><p>另外，算法题往往有步骤分，所以不一定要追求满分，在大方向不出错的情况下，使用更多的优化方式进行优化，这样可以尽可能地提高单题的得分。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
      <tag>前缀和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯算法笔记&lt;3&gt; 模拟</title>
    <link href="/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-3-%E6%A8%A1%E6%8B%9F/"/>
    <url>/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-3-%E6%A8%A1%E6%8B%9F/</url>
    
    <content type="html"><![CDATA[<p>先引入一个例题：</p><h3 id="Acwing-1210"><a href="#Acwing-1210" class="headerlink" title="Acwing 1210."></a>Acwing 1210.</h3><h2 id="连号区间数"><a href="#连号区间数" class="headerlink" title="连号区间数"></a>连号区间数</h2><p>小明这些天一直在思考这样一个奇怪而有趣的问题：</p><p>在 1∼N 的某个排列中有多少个连号区间呢？</p><p>这里所说的连号区间的定义是：</p><p>如果区间 [L,R] 里的所有元素（即此排列的第 L 个到第 R 个元素）递增排序后能得到一个长度为 R−L+1 的“连续”数列，则称这个区间连号区间。</p><p>当 N 很小的时候，小明可以很快地算出答案，但是当 N 变大的时候，问题就不是那么简单了，现在小明需要你的帮助。</p><p>输入格式<br>第一行是一个正整数 N，表示排列的规模。</p><p>第二行是 N 个不同的数字 Pi，表示这 N 个数字的某一排列。</p><p>输出格式<br>输出一个整数，表示不同连号区间的数目。</p><p>数据范围<br>1≤N≤10000,<br>1≤Pi≤N<br>输入样例1：<br>4<br>3 2 4 1<br>输出样例1：<br>7<br>输入样例2：<br>5<br>3 4 2 5 1<br>输出样例2：<br>9<br>样例解释<br>第一个用例中，有 7 个连号区间分别是：[1,1],[1,2],[1,3],[1,4],[2,2],[3,3],[4,4]<br>第二个用例中，有 9 个连号区间分别是：[1,1],[1,2],[1,3],[1,4],[1,5],[2,2],[3,3],[4,4],[5,5]</p><p>对于这个问题，首先想到了暴力算法，即枚举每一个区间，然后再使用一重循环对区间进行遍历，如果区间满足连号条件，就将cnt++<br>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10010</span>;<br><span class="hljs-keyword">int</span> q[N];<br><span class="hljs-keyword">int</span> temp[N];<br><span class="hljs-keyword">int</span> cnt;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>cin &gt;&gt; q[i];<br><br><span class="hljs-comment">/*初始的暴力做法*/</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; n; j++)<span class="hljs-comment">//对区间进行枚举</span><br>&#123;<br><span class="hljs-built_in">memcpy</span>(temp, q, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(q));<br><span class="hljs-built_in">sort</span>(&amp;temp[i], &amp;temp[j+<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = i; v &lt; j; v++)<br>&#123;<br><span class="hljs-keyword">if</span> (temp[v + <span class="hljs-number">1</span>] - temp[v] != <span class="hljs-number">1</span>)<br>flag = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">true</span>)<br>cnt++;<br><br><br><span class="hljs-built_in">memset</span>(temp, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(temp));<br>&#125;<br>&#125;<br><br>cout &lt;&lt; cnt&lt;&lt;endl;<br><br></code></pre></td></tr></table></figure><p>但是很遗憾，这种最基础的暴力算法时间复杂度过高了<br>故需要对这种算法进行优化</p><p>题目中说到：<br>第二行是 N 个不同的数字 Pi，表示这 N 个数字的<strong>某一排列</strong>。</p><p>注意到题目中给出的数据是一个<strong>排列</strong>，所以不会有重复的数字</p><p>所以对于每一个枚举出来的区间*q[i] 到 q[j]*，如果这个区间是连号的，就一定满足:<br>*j - i = 区间中的最大值 - 区间中的最小值 *</p><p>这样就能得到如下的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10010</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">1000000</span>;<br><span class="hljs-keyword">int</span> q[N];<br><br><span class="hljs-keyword">int</span> cnt;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>cin &gt;&gt; q[i];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">int</span> q_max =<span class="hljs-number">-1</span>*INF,q_min=INF;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; n; j++)<br>&#123;<br>q_max = <span class="hljs-built_in">max</span>(q_max, q[j]);<br>q_min = <span class="hljs-built_in">min</span>(q_min, q[j]);<br><br><span class="hljs-keyword">if</span> (q_max - q_min  == j - i)<br>cnt++;<br>&#125;<br>&#125;<br>cout &lt;&lt; cnt;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样一来，时间复杂度就降低到了能够接受的程度</p><hr><h3 id="总结：-无巧不成题"><a href="#总结：-无巧不成题" class="headerlink" title="总结： 无巧不成题"></a>总结： 无巧不成题</h3><p>这道题目告诉我们，再写算法题时，可以通过题目给出的一些隐藏的已知条件，来改变判断方式来优化算法，从而达到降低时间复杂度的目的。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯算法笔记&lt;4&gt; 图的存储</title>
    <link href="/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-4-%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <url>/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-4-%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<p>图的存储有多种方式，对于稀疏图，可以用邻接表来存储，对于稠密图，可以用邻接矩阵存储<br>在实际的考试中，使用vector（动态数组）能十分便捷地存储稀疏图<br>例题：<br>第四届蓝桥杯A组真题：大臣的旅费<br>题目链接：<br><a href="https://www.acwing.com/problem/content/description/1209/">https://www.acwing.com/problem/content/description/1209/</a></p><p>这题中，需要存储节点数量较大， 属于稀疏图<br>需要使用vector存图后，找到图的直径</p><p>闫老板在相关讲解中，提到了如下几点：</p><ul><li><p>1.定义一个结构体 ,第一个点是编号,第二个是长度，这个结构体用于存储每一条边</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">struct</span> Edge&#123; <br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">id</span>,w;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>2.开N个类型为Edge的vector，用于存图，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;Edge&gt; h[N];<br></code></pre></td></tr></table></figure></li><li><p>3.由于是无向图，对于每一条输入，需要添加a-&gt;b和b-&gt;a两条边，这里需要注意vector中，push_back()的使用</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">for</span>(int i=<span class="hljs-number">0</span>;i&lt;n-<span class="hljs-number">1</span>;i++)<br>   &#123;<br>       <span class="hljs-selector-tag">int</span> <span class="hljs-selector-tag">a</span>,<span class="hljs-selector-tag">b</span>,<span class="hljs-selector-tag">c</span>;<br>       <span class="hljs-selector-tag">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);<br>       <span class="hljs-selector-tag">h</span><span class="hljs-selector-attr">[a]</span><span class="hljs-selector-class">.push_back</span>(&#123;<span class="hljs-selector-tag">b</span>,<span class="hljs-selector-tag">c</span>&#125;);<br>       <span class="hljs-selector-tag">h</span><span class="hljs-selector-attr">[b]</span><span class="hljs-selector-class">.push_back</span>(&#123;<span class="hljs-selector-tag">a</span>,<span class="hljs-selector-tag">c</span>&#125;);<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>关于vector的遍历方式：<br> C11引入了一种新的遍历方式：</p> <figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs glsl"> <span class="hljs-type">void</span> dfs(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> father,<span class="hljs-type">int</span> <span class="hljs-built_in">distance</span>)<br> &#123;<br>  dist[u]=<span class="hljs-built_in">distance</span>;<br>  <span class="hljs-keyword">for</span>(auto node :h[u])  <span class="hljs-comment">//C11新的遍历方式</span><br>  &#123;<br>      <span class="hljs-keyword">if</span>(node.id!=father)<br>      &#123;      <br>            dfs(node.id,u,<span class="hljs-built_in">distance</span>+node.w);<br>  <br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯算法笔记&lt;5&gt; 贪心基础</title>
    <link href="/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-5-%E8%B4%AA%E5%BF%83%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-5-%E8%B4%AA%E5%BF%83%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>贪心的思想即在每一步中，采取某种短视的做法达到局部最优解，在完成所有步骤后，就达到了全局的最优解。<br>这种算法属于较难的一种，既没有固定的套路/模板，而且某些贪心问题也比较难以证明，在实际做题时，需要多积累一些贪心模型，遇到实际的问题时，尽量往已经收悉的模型上靠，这样能降低一些解题难度。</p><hr><p>例题1：股票买卖<br>题目链接：<a href="https://www.acwing.com/problem/content/1057/">acwing.1055</a> </p><p>数据范围为十万，所以只能选用时间复杂度为n或者nlogn的算法。<br>值得注意的是，很多贪心问题在实现的时候，都是先排序，然后再采用某种策略进行选择。(这题中并没有排序)</p><p>在这题中，由于可以多次操作买入与卖出，所以利用一个指针指向下一个price，如果下一个price增加，就买入，否则就卖出。</p><p>实现的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> q[N];<br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q[i]);<br><br><span class="hljs-keyword">int</span> w; <span class="hljs-comment">//w为手中所持股票的价值</span><br><span class="hljs-keyword">int</span> pro=<span class="hljs-number">0</span>; <span class="hljs-comment">//利润</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i + <span class="hljs-number">1</span> &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (q[i + <span class="hljs-number">1</span>] &gt; q[i]) <span class="hljs-comment">//只要下一天的价值比当天的价值高, 就赚一次两天的差价(贪心思想的体现)</span><br>&#123;<br>pro += q[i + <span class="hljs-number">1</span>] - q[i];<br>&#125;<br>&#125;<br><br>cout &lt;&lt; pro&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>例题2：仓库选址<br>题目链接：<a href="https://www.acwing.com/problem/content/106/">acwing.104</a><br>在这题中，闫老板提到了一个实用的解题技巧，对于复杂的问题，可以先举例几个简单的情况，例如在本题中，可以先思考在只有一个或者两个货仓的时候如何选址。<br>很显然，如果只有一家商店，可以直接将地址选在这个货舱之上，如果有两个上商店，就可以将货舱置于两家商店之间的任意位置。</p><p>于是可以猜想：<br>如果有奇数个商店，可以把仓库建在中位数上<br>如果有偶数个商店，可以把仓库建在中间的两个商店之间</p><p>（这个猜想是正确的，可以利用绝对值不等式加以证明，具体的证明过程可以参考闫老板的视频）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> q[N];  <span class="hljs-comment">//q[N]存储的是坐标</span><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;q[i]);<br><br><span class="hljs-built_in">sort</span>(q, q + n);<br><br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> base;<br>base = q[n / <span class="hljs-number">2</span>];<br><br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>res += <span class="hljs-built_in">abs</span>(q[i] - base);<br><br>cout &lt;&lt; res &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯算法笔记&lt;7&gt; 递归、递推与DFS</title>
    <link href="/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-7-%E9%80%92%E5%BD%92%E3%80%81%E9%80%92%E6%8E%A8%E4%B8%8EDFS/"/>
    <url>/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-7-%E9%80%92%E5%BD%92%E3%80%81%E9%80%92%E6%8E%A8%E4%B8%8EDFS/</url>
    
    <content type="html"><![CDATA[<p>1.递归实现指数型枚举<br>从 1∼n 这 n 个整数中随机选取任意多个，输出所有可能的选择方案。</p><p>输入格式<br>输入一个整数 n。</p><p>输出格式<br>每行输出一种方案。</p><p>同一行内的数必须升序排列，相邻两个数用恰好 1 个空格隔开。</p><p>对于没有选任何数的方案，输出空行。</p><p>本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。</p><p>数据范围<br>1≤n≤15<br>输入样例：<br>3<br>输出样例：</p><p>3<br>2<br>2 3<br>1<br>1 3<br>1 2<br>1 2 3</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">16</span>;<br><span class="hljs-keyword">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (st[i] == <span class="hljs-literal">true</span>)<br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>st[i] = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">dfs</span>(i + <span class="hljs-number">1</span>);<br>st[i] = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//回溯</span><br><br>st[i] = <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">dfs</span>(i + <span class="hljs-number">1</span>);<br>st[i] = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//回溯</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.递归实现排列类型枚举<br>把 1∼n 这 n 个整数排成一行后随机打乱顺序，输出所有可能的次序。</p><p>输入格式<br>一个整数 n。</p><p>输出格式<br>按照从小到大的顺序输出所有方案，每行 1 个。</p><p>首先，同一行相邻两个数用一个空格隔开。</p><p>其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面。</p><p>数据范围<br>1≤n≤9<br>输入样例：<br>3<br>输出样例：<br>1 2 3<br>1 3 2<br>2 1 3<br>2 3 1<br>3 1 2<br>3 2 1<br>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> q[N];<br><span class="hljs-keyword">bool</span> st[N];<br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这里有两种递归方案</span><br><span class="hljs-comment">方案1：</span><br><span class="hljs-comment">将每个数字排列在不同的位置上</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">方案2：</span><br><span class="hljs-comment">在每个位置上排列不同的数</span><br><span class="hljs-comment">这里选择方案2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (i &gt; n)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>cout &lt;&lt; q[j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (st[j] == <span class="hljs-literal">false</span>)<br>&#123;<br>q[i] = j;<br>st[j] = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">dfs</span>(i + <span class="hljs-number">1</span>);<br>st[j] = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这次看到这两道题已经是二刷了<br>这里的两道题都是递归递推的经典题，都体现了DFS+回溯的思想。<br>需要切记在DFS回溯的时候要还原现场，另外，如果考试时想不通递归的路径，可以尝试画出搜索树。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归与递推</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯算法笔记&lt;8&gt; 高精度系列</title>
    <link href="/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-8-%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%B3%BB%E5%88%97/"/>
    <url>/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-8-%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><p>高精度加法归根结底是一个模拟人工加法的过程<br>大致要点如下<br>Ⅰ.使用两个数组a,b<strong>倒序存储</strong>输入的数字，这样能比较方便地处理进位问题<br>Ⅱ.在进行加法地过程中，使用一个指针 <em>i</em> 指向当前正在相加的位置,并开一个t变量存储进位<br>Ⅲ.如果<em>a[i]<em>或</em>b[i]<em>存在，就使得</em>t</em>加上 <em>a[i]<em>或</em>b[i]</em><br>Ⅳ.向结果数组<em>c</em>中加入<em>t%10</em><br>Ⅴ.<em>t=t/10</em> 完成进位，为下一轮运算的进位作准备<br>Ⅵ.（<strong>易错</strong>）在循环相加各个位之后，<em>t</em>中仍然可能有残余的数字没有加入到结果数组中，如50 + 50 这种场景，循环后<em>c</em>数组中为00，t为1，所以需要手动添加剩余的值。<br>实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; a,vector&lt;<span class="hljs-keyword">int</span>&gt; b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">size</span>()||i&lt;b.<span class="hljs-built_in">size</span>();i++)  <br>    &#123;<br>        <span class="hljs-keyword">if</span>(i&lt;a.<span class="hljs-built_in">size</span>()) t+=a[i];<br>        <span class="hljs-keyword">if</span>(i&lt;b.<span class="hljs-built_in">size</span>()) t+=b[i];<br>           <br>        c.<span class="hljs-built_in">push_back</span>(t%<span class="hljs-number">10</span>);<br>        t/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t)<br>    c.<span class="hljs-built_in">push_back</span>(t);<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><p>高精度减法也是一个模拟人工减法的过程，但是减法有可能出现负数，实现起来比高精度加法复杂<br>大致分为以下几个过程</p><h4 id="比较两个数组谁更大"><a href="#比较两个数组谁更大" class="headerlink" title="比较两个数组谁更大"></a>比较两个数组谁更大</h4><p>实现如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;a,vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*位数多的大*/</span><br><span class="hljs-keyword">if</span>(a.<span class="hljs-built_in">size</span>()!=b.<span class="hljs-built_in">size</span>())<br><span class="hljs-keyword">return</span> a.<span class="hljs-built_in">size</span>()&gt;b.<span class="hljs-built_in">size</span>();<br><span class="hljs-comment">/*位数相同则逐位比较*/</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">size</span>();i++)<br><span class="hljs-keyword">if</span>(a[i]!=b[i])<br><span class="hljs-keyword">return</span> a[i]&gt;b[i];<br><span class="hljs-comment">/*经历了上面两步都还没有返回，说明相等，直接return*/</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="较大的a-和较小的b-，进行高精度减法"><a href="#较大的a-和较小的b-，进行高精度减法" class="headerlink" title="较大的a[]和较小的b[]，进行高精度减法"></a>较大的a[]和较小的b[]，进行高精度减法</h4><p>Ⅰ.需要开一个int t 来记录之前是否有过借位<br>Ⅱ.每次运算，分够不够减两种情况</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">如<br><span class="hljs-code">    A3 A2 A1 A0</span><br><span class="hljs-section">-      B2 B1 B0</span><br><span class="hljs-section">----------------------</span><br><span class="hljs-code"> |--- if(Ai-Bi&gt;=0)  Ai-Bi-t</span><br>对于每个Ai-Bi-t分两种情况 |<br><span class="hljs-code">  |---if(Ai-Bi&lt;0)  Ai-Bi+10-t (需要借一位)</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">mine</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; a, vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; c;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">size</span>();i++)<br>&#123;<br><span class="hljs-comment">//进位</span><br>t=a[i]-t;<br><span class="hljs-keyword">if</span>(i&lt;b.<span class="hljs-built_in">size</span>()) t-=b[i];  <span class="hljs-comment">//由于b较小，可能没有第i位，所以在减b之前判断</span><br>c.<span class="hljs-built_in">push_back</span>((t+<span class="hljs-number">10</span>)%<span class="hljs-number">10</span>); <span class="hljs-comment">//两种情况合二为一写</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    如果 t (或者说a[i]-b[i]-t)&lt; 0  这种情况需要借位 体现在本轮循环,即push_back(t+10) 并在循环后使t为1</span><br><span class="hljs-comment">    如果 t (或者说a[i]-b[i]-t)&gt; 0  这种情况无需要借位 体现在本轮循环中,即是push_back(t) 并在循环后使t为0</span><br><span class="hljs-comment">    这两种情况都能合二为一地写成push_back((t+10)%10)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span>(t&lt;<span class="hljs-number">0</span>) t=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> t=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*去除前导零*/</span><br><span class="hljs-keyword">while</span>(c.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>&amp;&amp;c.<span class="hljs-built_in">back</span>()==<span class="hljs-number">0</span>) c.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-keyword">return</span> c;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
      <tag>高精度</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯算法笔记&lt;9&gt; BFS基础</title>
    <link href="/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-9-BFS%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/07/19/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-9-BFS%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>BFS是蓝桥杯中特别常用算法<br>之前学习BFS已经有一段时间了，以至于现在实现起来还是不太熟qwq</p><p>八数码：<br>在一个 3×3 的网格中，1∼8 这 8 个数字和一个 x 恰好不重不漏地分布在这 3×3 的网格中。</p><p>例如：</p><p>1 2 3<br>x 4 6<br>7 5 8<br>在游戏过程中，可以把 x 与其上、下、左、右四个方向之一的数字交换（如果存在）。</p><p>我们的目的是通过交换，使得网格变为如下排列（称为正确排列）：</p><p>1 2 3<br>4 5 6<br>7 8 x<br>例如，示例中图形就可以通过让 x 先后与右、下、右三个方向的数字交换成功得到正确排列。</p><p>交换过程如下：</p><p>1 2 3   1 2 3   1 2 3   1 2 3<br>x 4 6   4 x 6   4 5 6   4 5 6<br>7 5 8   7 5 8   7 x 8   7 8 x<br>现在，给你一个初始网格，请你求出得到正确排列至少需要进行多少次交换。</p><p>输入格式<br>输入占一行，将 3×3 的初始网格描绘出来。</p><p>例如，如果初始网格如下所示：</p><p>1 2 3<br>x 4 6<br>7 5 8<br>则输入为：1 2 3 x 4 6 7 5 8</p><p>输出格式<br>输出占一行，包含一个整数，表示最少交换次数。</p><p>如果不存在解决方案，则输出 −1。</p><p>输入样例：<br>2  3  4  1  5  x  7  6  8<br>输出样例<br>19</p><h3 id="需要关注的点："><a href="#需要关注的点：" class="headerlink" title="需要关注的点："></a>需要关注的点：</h3><p>1.unordered_map<br>在算法题中，unordered_map可以当成一种特殊的数组来用（emmm姑且这么理解吧）<br>在声明时可以使用 <em>unordered_map&lt;string,int&gt; d</em> 这种形式<br>这种数据结构能用于统计对应状态是否出现过/出现过多少次<br>在算法题中，常用的方法有如下几种：<br>   insert() 用得不多,插入的数是一个pair<br>   erase() 输入的是pair或者迭代器<br>   find()如果key存在，则find返回key对应的迭代器，如果key不存在，则find返回unordered_map::end。因此可以通过map.find(key) == map.end()来判断，key是否存在于当前的unordered_map中。<br>   count()能用以统计key值在unordered_map中出现的次数。实际上，c++ unordered_map不允许有重复的key。因此，如果key存在，则count返回1，如果不存在，则count返回0<br>   注意：不能用d[xxx]==0这种形式来判断xxx在map中是否出现过</p><p>2.状态转移<br>由于每次需要转移的是一个矩阵，使用传统的二位数组不太方便<br>这里y总使用了string来转移状态，并且很好地处理了字符串比较的问题<br>但是涉及到了转化一维数组到二位数组</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string start;<br>string send = &#123; <span class="hljs-string">&quot;12345678x&quot;</span> &#125;;<br><span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span> &#125;;<br><span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(string state)</span></span><br><span class="hljs-function"></span>&#123;<br>queue&lt;string&gt; q;<br>unordered_map&lt;string, <span class="hljs-keyword">int</span>&gt; d;<br>q.<span class="hljs-built_in">push</span>(state);<br>d[state] = <span class="hljs-number">0</span>;<br><br><br><span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>&#123;<br>string t = q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><br><span class="hljs-keyword">int</span> distance = d[t];<br><br><span class="hljs-keyword">if</span> (t == send)<br><span class="hljs-keyword">return</span> d[t];<br><br><span class="hljs-keyword">int</span> k = t.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br><span class="hljs-keyword">int</span> x = k / <span class="hljs-number">3</span>;<br><span class="hljs-keyword">int</span> y = k % <span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br><span class="hljs-keyword">int</span> a = x + dx[i];<br><span class="hljs-keyword">int</span> b = y + dy[i];<br><br><span class="hljs-keyword">if</span> (a &gt;= <span class="hljs-number">0</span> &amp;&amp; a &lt; <span class="hljs-number">3</span> &amp;&amp; b &gt;= <span class="hljs-number">0</span> &amp;&amp; b &lt; <span class="hljs-number">3</span>)<br>&#123;<br><span class="hljs-built_in">swap</span>(t[k], t[a * <span class="hljs-number">3</span> + b]);<br><span class="hljs-keyword">if</span> (!d.<span class="hljs-built_in">count</span>(t)) <span class="hljs-comment">//在每次入队前判断是否出现过</span><br>&#123;<br>d[t] = distance + <span class="hljs-number">1</span>;<br>q.<span class="hljs-built_in">push</span>(t);<br>&#125;<br><span class="hljs-built_in">swap</span>(t[k], t[a * <span class="hljs-number">3</span> + b]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)<br>&#123;<br>string a;<br>cin &gt;&gt; a;<br>start += a;<br>&#125;<br><br>cout &lt;&lt; <span class="hljs-built_in">bfs</span>(start) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Web 学习笔记</title>
    <link href="/2021/07/19/Java-Web-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/19/Java-Web-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-web-学习笔记"><a href="#Java-web-学习笔记" class="headerlink" title="Java web 学习笔记"></a>Java web 学习笔记</h1><h4 id="1-关于Tomcat的设置"><a href="#1-关于Tomcat的设置" class="headerlink" title="1.关于Tomcat的设置"></a>1.关于Tomcat的设置</h4><p>tomcat 端口号默认为8080，比较常见，容易发生冲突<br>修改端口号：<br>Server.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span>&gt;</span>为端口号<br></code></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    docBase: 实际路径<br>​    path:虚拟路径<br>​    如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;D:\Study&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/Jspproject&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    访问Jspproject 相当于访问D:\study</p><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p>访问：localhost:8888<br>如果是IE需要加http前缀</p><h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><p>webapps：放默认的项目<br>默认访问root</p><p>在项目/WEB-INF/web.xml 中设置 默认的 初始页面<br>web.xml中的<welcome_file_list>中为默认访问优先级</p><h4 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%局部变量、java语句%&gt;<br><br>&lt;%!<br>定义全局变量、方法<br>如：<br><span class="hljs-keyword">public</span> String bookName;<br><span class="hljs-function">pubilc <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>&#125;   <br>%&gt;<br><br>&lt;%=用于输出%&gt;<br></code></pre></td></tr></table></figure><h4 id="7-JSP内置对象"><a href="#7-JSP内置对象" class="headerlink" title="7.JSP内置对象"></a>7.JSP内置对象</h4><p>jsp的置对象：不需要new也能使用<br>9大内置对象：</p><ul><li><p>out：输出对象</p></li><li><p>pageContext:</p></li><li><p>request:存储客户端向服务端发送的请求消息</p><pre><code>         常见方法：</code></pre><ul><li>1.String getParameter(String name):根据请求的字段名key(input标签的name属性)返回字段值(value属性值)</li><li>2.String[]  getParameterValues(String name ):根据请求的字段名返回多个字段值</li><li>3.void setCharacterEncoding (“编码格式:UTF-8”)</li><li>getRequestDispatcher(“b.jsp”)</li><li> getServerContext…</li></ul></li><li><p>response</p></li><li><p>session</p></li><li><p>applicaton</p></li><li><p>config</p></li><li><p>page</p></li><li><p>xception</p></li></ul><h4 id="8-response-对象详解"><a href="#8-response-对象详解" class="headerlink" title="8.response 对象详解"></a>8.response 对象详解</h4><ul><li><p>void addCookie(Cookie cookie)</p><p>​     服务端向客户端增加Cookie 对象</p></li><li><p>void sendRedirect(String location) throws IOException</p><pre><code> 页面跳转的一种方式</code></pre></li><li><p>void setContentType(String type)</p><pre><code>   设置服务端的contentType 类型</code></pre></li></ul><h4 id="9-请求转发和重定向的区别："><a href="#9-请求转发和重定向的区别：" class="headerlink" title="9.请求转发和重定向的区别："></a>9.请求转发和重定向的区别：</h4><p>地址栏|请求转发不变|重定向改变|</p><hr><p>是否保留第一次请求时的数据 |保留|不保留|<br>请求的次数| 1           |        2    |<br>跳转发生的位置      |          服务端   |     客户端发出的第二次跳转|</p><h4 id="10-cookie和session"><a href="#10-cookie和session" class="headerlink" title="10.cookie和session"></a>10.cookie和session</h4><ul><li>session(存在于服务端，不需要new)</li><li>cookie(存在于客户端，不是内置对象，使用前需要new) </li></ul><h5 id="10-1-cookie："><a href="#10-1-cookie：" class="headerlink" title="10.1 cookie："></a>10.1 cookie：</h5><p>   cookie是服务端产生的，再发送给客户端保存<br>   相当于本地缓存的作用，但是安全性较差<br>   作用：可以提高服务端访问的效率，但是安全性较差。</p><p>   <strong>提供的类</strong>：javax.servlet.http.Cookie</p><p><strong>方法</strong>:</p><ul><li><p>public Cookie(String key,String value) (构造方法)</p></li><li><p> String getName()</p></li><li><p>String getValue()</p></li><li><p>void setMaxAge(int expiry) //设置最大有效期 （秒）</p><p> <strong>发送的过程：</strong><br> 1.服务端准备Cookie</p><pre><code>  response.addCookie(Cookie cookie)  </code></pre><p> 2.页面跳转（转发，重定向）</p><p> 3.客户端获取cookie:</p><pre><code> request.getCookie();</code></pre><p>__注意__：</p><pre><code> a.服务端增加cookie是通过response对象；客户端获取对象：request对象</code></pre></li></ul><p>​       b.一次只能获取全部的Cookie</p><p>​        c.通过F12可以发现，除了自己设置的Cookie对象以外，还有一个name为jesessionid的  cookie</p><p>​        d.建议cookie中只保存英文和数字，否则需要编码解码处理</p><h5 id="10-2-session"><a href="#10-2-session" class="headerlink" title="10.2 session"></a>10.2 session</h5><p> 本意为会话<br> 会话的定义比较宏观<br> 开始-&gt;结束  是一次会话</p><p> <strong>session执行机制:</strong><br>1.在客户端与服务端发出第一次请求时，()服务端会产生一个对应的session（用于保存该客户的信息）<br> 并且每一个session对象，都会有一个唯一的sessionId（用于区分其他session）</p><p>2.服务端又会产生一个cookie，该cookie的name=JSESSIONID,value=服务端sessionId<br> 服务端在响应客户端时，会将JSESSIONID带给客户端</p><p>3.这样一来，客户端就有一个cookie(JSESSIONID)<br> COOKIE中的JSESSIONID 和session中的sessionID一一对应，实现对客户端的识别<br> 因此，客户端的cookie就可以和服务端一一对应<br> (JSESSIONID-sessionID)</p><p> 4.客户端第二次/第N次请求服务端时，服务端会先用客户端的cookie中的JSESSIONID 去服务端匹配 sessionid<br> 如果匹配成功，说明此用户已经不是第一次访问，无需登录</p><p><strong>session特性：</strong></p><ul><li>session存储于服务端</li><li>session是在同一个用户请求时共享</li></ul><p><strong>session方法</strong>：</p><ul><li>getID():获取sessionID</li><li>boolean isNew():判断是否时第一次访问</li><li> void invalidate():使session失效，如注销时可以使用</li><li> void setAttribute()</li><li> Object getAttribute()</li><li>void setMaxInactiveInterval(秒)：设置最大有效非活动时间</li><li> int getMaxInactiveInterval</li></ul><h5 id="11-JDBC"><a href="#11-JDBC" class="headerlink" title="11.JDBC"></a>11.JDBC</h5><p>JDBC DriverManager：管理不同的数据库驱动</p><h5 id="11-1JDBC-API-主要功能"><a href="#11-1JDBC-API-主要功能" class="headerlink" title="11.1JDBC API 主要功能"></a>11.1JDBC API 主要功能</h5><ul><li>与数据库建立链接</li><li>2.发送SQL语句</li><li>3.返回处理结果</li></ul><p>通过以下类/接口实现：</p><ul><li><p>DriverManager:管理JDBC驱动</p></li><li><p>Connection：连接,（通过DriverManager产生）</p></li><li><p>Connection产生操作数据库对象</p><ul><li>Connection产生Statement对象createStatement()</li><li> Connection产生PreparedStatement对象:prepareStatement()</li><li>Connection产生CallableStatement对象 prepareCall()</li></ul></li></ul><p> <strong>Statement操作数据库</strong> :<br>   增删改：executeUpdate()<br>   查询：  executeQuery()</p><p><strong>ResultSet 保存结果集</strong><br>    next()<br>    previous()<br>    getXXX()</p><p><strong>PreparedStatement操作数据库</strong>:<br>   增删改：executeUpdate()<br>   查询：  executeQuery<br>   赋值操作：setXXX</p><p>   PareparedStatement示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String SQL=<span class="hljs-string">&quot;insert into B1 values(?,?,?)&quot;</span>;<br>pstmt=connection.prepareStatement(SQL); <span class="hljs-comment">//预编译</span><br>pstmt.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">39</span>);<br>pstmt.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;abc&quot;</span>);<br>pstmt.setString(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;abc&quot;</span>);<br>pstmt.excuteUpdate();<br></code></pre></td></tr></table></figure><p> 推荐使用PreparedStatement</p><p> 优势:</p><ul><li>1.方便  </li><li> 2.高效率 </li><li> 3.有效防止SQL注入（用户输入和开发人员的SQL语句融为一体）</li></ul><p> c.Statement(PreparedStatement)：增删查改（通过Connection产生）</p><p> d.CallableStatement：调用数据库中的存储过程，存储函数</p><p> e.Result：返回的结果集（通过Statement等产生）</p><h5 id="11-2-jdbc访问数据库的具体步骤："><a href="#11-2-jdbc访问数据库的具体步骤：" class="headerlink" title="11.2.jdbc访问数据库的具体步骤："></a>11.2.jdbc访问数据库的具体步骤：</h5><ul><li><p>1.导入驱动包，加载具体的驱动类</p></li><li><p>2.与数据库建立链接：通过connect对象</p></li><li><p>3.发送sql，执行</p><ul><li>增删改:stmt.executeUpdate() 返回一个数字</li></ul></li><li><p>4.查询:  stmt.executeQuery() 返回一个ResultSet,类似于一张表</p></li><li><p>5.rs默认指向结果集的前一行</p><ul><li>rs.next()：1.下移指针<pre><code>              2.判断下移之后的元素是否为空                       3.如果有数据，返回true                 如果未非空，返回false</code></pre></li><li>  rs.getXXX():获取rs指向行的数据</li></ul></li></ul><p><strong>查询示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">String SQL2=<span class="hljs-string">&quot;SELECT * FROM B1&quot;</span>;<br> ResultSet rs=stmt.executeQuery(SQL2);<br> <span class="hljs-keyword">while</span>(rs.next())<br>&#123;<br>       <span class="hljs-keyword">int</span> bid=rs.getInt(<span class="hljs-string">&quot;bid&quot;</span>);         <span class="hljs-comment">//参数可以是字段名或者是下标，但是推荐使用字段名</span><br>       String bname=rs.getString(<span class="hljs-string">&quot;bname&quot;</span>);<br>       String color=rs.getString(<span class="hljs-string">&quot;color&quot;</span>);<br>       System.out.println(bid+<span class="hljs-string">&quot; &quot;</span>+bname+<span class="hljs-string">&quot; &quot;</span>+color);<br>&#125;<br></code></pre></td></tr></table></figure><p>d.处理结果集</p><h5 id="12-3-数据库驱动"><a href="#12-3-数据库驱动" class="headerlink" title="12.3 数据库驱动"></a>12.3 数据库驱动</h5><table><thead><tr><th>数据库</th><th>驱动jar</th><th>具体驱动类</th><th>链接字符串(数据库名，IP地址和端口号)</th></tr></thead><tbody><tr><td>mysql</td><td>mysql-connector-java-x.jar</td><td>com.mysql.jdbc.Driver</td><td>jdbc:mysql://localhost:3306/数据库实例名</td></tr><tr><td>sql server</td><td>sqljdbc-x.jar</td><td>com.microsoft.sqlserver.jdbc.SQLServerDriver</td><td>jdbc:sqlserver://localhost:1433;databaseName=BiliClass</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h5 id="11-4-java-bean"><a href="#11-4-java-bean" class="headerlink" title="11.4.java bean"></a>11.4.java bean</h5><p> 将jsp的代码转移到java中，就是JavaBean</p><p> javaBean的要求</p><p> a.所有的属性都是private，并提供set/get<br> b.public修饰的类，public无参构造</p><p> 从使用层面 java bean分为两类</p><ul><li><p>封装业务逻辑的JavaBean</p></li><li><p>封装数据的JavaBean:</p><p> 对应于数据库的一张表</p></li></ul><h4 id="12servelt"><a href="#12servelt" class="headerlink" title="12servelt:"></a>12servelt:</h4><p>java 类必须符合一定的规范才是servlet<br>规范：</p><ul><li>必须继承 javax.servlet.http.Httpserver</li><li>重写其中的doGet()或 doPost()方法</li></ul><p>servlet要想使用，必须配置web.xml或者@servlet（注解方式）<br>Servlet2.5: web.xml<br>Servlet3.0: @WebServlet</p><p><strong>1.Servlet2.5:</strong><br>步骤：<br>1.编写一个类，继承HttpServlet<br>2.重写doGet()、doPost()方法<br>3.编写web.xml中的servlet映射关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2.Servlet 生命周期</strong><br>a.加载<br>b.初始化: init() 该方法会在Servlet被加载并实例化以后执行<br>c.服务；service()-&gt;doGet()-&gt;doPost()<br>d.销毁:destroy() Servlet 被系统回收时执行<br>e.卸载：</p><p>init():默认第一次访问Servlet时执行，并且只执行一次<br>       可以修改为tomcat启动时自动执行<br>       2.5方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-start-up</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 3.0方式：<br>       @WebServlet(value=”/WelcomeServlet”,loadOnStartup=1)<br>service():调用几次执行几次<br>destroy():关闭Tomcat服务时执行</p><h5 id="3-Servlet-API"><a href="#3-Servlet-API" class="headerlink" title="3.Servlet API:"></a>3.Servlet API:</h5><p>由两个软件包组成</p><ul><li>对应于 HTTP协议的软件包</li><li>对应于其它协议的软件包<br>我们学习的Servlet 是位于javax.servlet.http包中的类和接口，是基础HTTP协议</li></ul><p>PrintWriter out=response.getWriter()后可以使用Writer</p><h5 id="4-servlet继承关系"><a href="#4-servlet继承关系" class="headerlink" title="4.servlet继承关系"></a>4.servlet继承关系</h5><p>ServletConfig接口<br>getServletContext():获取Servlt 上下文对象<br>getInitParameter(String name):在当前servlet范围内，获取名为name的参数值</p><p>ServletContext中的常见方法(application)：<br>getRealPath()<br>getContextPath()<br>setAttribute()<br>getAttribute()<br>getInitParameter():在当前web范围内，获取名为name的参数值</p><h5 id="13-MVC设计模式："><a href="#13-MVC设计模式：" class="headerlink" title="13.MVC设计模式："></a>13.MVC设计模式：</h5><table><thead><tr><th>M</th><th>Model (模型)</th><th>一个功能。用JavaBean来实现</th></tr></thead><tbody><tr><td>V</td><td>View (视图)</td><td>负责页面的展示以及与用户交互。 使用HTML/CSS/JS/Jquery 等前端技术实现</td></tr><tr><td>C</td><td>Controller</td><td>控制器: 接收各种请求，将请求跳转到模型进行处理；模型处理完毕后&lt;br   再将处理的结果返回给请求处。可以用JSP实现，但是一般建议使用Servlet实现控制器</td></tr></tbody></table><p><strong>三层架构：</strong><br> 与MVC的设计模式目标一直：都是为了解耦合，提高代码的复用<br> 上层将请求发送给下层， 下层处理后返回给上层</p><p> 1.表示层(USL,User,Show Layer:视图层)</p><ul><li><p>前台：对应MVC中的View，用于和用户交互、界面的显示</p><pre><code>   jsp js html css jquery等   一般位于web目录下</code></pre></li><li><p>后台：对应于MVC中的Controller,用户控制跳转、调用业务逻辑层</p><pre><code>   Servlet(Spring MVC  Struts2)   一般位于xxx.servlet包中</code></pre></li></ul><p> 2.业务逻辑层(BLL,Business Logic Layer:service层)</p><ul><li>用于数据，带逻辑性的操作<pre><code>   一般位于xxx.service包中</code></pre></li></ul><p> 3.数据库访问层(DAL,Data Assess Layer:DAO层)</p><ul><li>直接访问数据库操作、原子性的操作（增删查改）<pre><code>   一般位于xxx.dao包中</code></pre></li></ul><p><strong>三层优化：</strong><br>  1.加入接口<br>   建议面向接口编程；先实现接口再实现类<br>   –service、DAO加入接口<br>   –接口的实现与规范<br>       接口:interface       起名 I实体类Service  IStudentSerice<br>       实现类：implement    起名  实体类SerciceImpl StudentServiceImpl</p><pre><code>   接口：I实体层所在的包名   实现类：实体类层所在包名Impl</code></pre><p>  2.DBUtil</p><p>实现分页<br> 要实现分页，必须知道从哪里开始到哪里结束<br> 分页严格依赖于SQL语句</p><p> My SQL从0开始计数，Oracle/Sql server从1开始计数</p><p> MySQL实现分页的SQL：<br> limit 开始，多少条<br> 第0页<br> select * from student limit 0,10;<br> 第1页<br> select * from student limit 10,10;<br> 第2页<br> select * from student limit 20,10;<br> 第n页<br> select * from student limit n*10,10;<br> 即<br> select * from student limit 页数*页面大消,页面大小</p><p> oracle分页（没有看完）<br> (oracle没有limit)<br> select * from studnet where sno&gt;=(n-1)<em>10+1 and sno&lt;=n</em>10  此种写法的前提必须是ID值连续，否则无法满足每页显示10条数据</p><p> 2.select rownum,t.* from &gt;=(n-1)<em>10+1 and sno&lt;=n</em>10 order by sno;<br> rownumber 不能查询大于0的数据</p><p>Sql Server分页<br> Sql Server从1开始</p><p> row_number()使用方法：<br> row_number() over(字段值)</p><p> select *<br> from(<br>        select row_number() over(sno ordby sno asc) as r,* from student</p><pre><code>    where r&lt;=n*10        row_number()&lt;=n*10</code></pre><p> )<br> where r&gt;=(n-1)*10+1 and ;</p><p> 新的版本：<br> select  * from student order by sno<br> offser (页数-1)*页面大小+1 rows fetch next 页面大消 rows only;</p><p> 分页实现：<br> 5个变量（属性）<br> 1.数据总数                         |  查数据库 (select count(*) …)<br> 2.页面大小（每页显示的数据条数） 30  |用户自定义<br> 3.总页数                           |用户自定义<br> 4.当前页的页码（页码）              |程序自动计算=（数据总数/页面大小）向上取整</p><p> 5.当前页的对象集合（实体类集合）：每页显示的所有数据的集合    |查数据库，分页SQL</p><p>mybatis<br>  1.创建maven项目<br>  2.配置maven依赖<br>  3.配置mybatis核心配置文件<br>       mybatis 配置文件<br>  4.编写核心工具类<br>  5.编写代码<br>    1.实体类<br>    2.Dao接口<br>    3.接口实现类<br>       由原来的impl转换为mapper配置文件</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="/2021/07/19/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/19/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring学习笔记"><a href="#Spring学习笔记" class="headerlink" title="Spring学习笔记"></a>Spring学习笔记</h1><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><pre><code>Spring理念：使现有的技术更加容易使用本身是一个大杂烩，整合了现有的技术框架。SSH：Sturct2+Spring+Hibernate    (旧的技术体系)SSM:  SpringMVC+Spring+Mybatismaven需要导入的包：</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h3><ul><li>Spring是一个免费的开源的框架（容器）</li><li>Spring使一个轻量级的、非入侵式的框架！</li><li>特性：控制反转(IOC)、(AOP)</li><li>支持事务的处理，对框架整合的支持</li></ul><p>总结：Spring是一个轻量级的控制反转(IOC)和面向切面编程的框架。</p><h3 id="1-3-组成"><a href="#1-3-组成" class="headerlink" title="1.3 组成"></a>1.3 组成</h3><p><img src="img/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" alt="image-20210625175251986"></p><h3 id="1-4-拓展"><a href="#1-4-拓展" class="headerlink" title="1.4 拓展"></a>1.4 拓展</h3><pre><code>在Spring官网有这个介绍：现代化的Java开发，也就是基于Spring的开发    </code></pre><ul><li><p>Spring Boot</p><ul><li>一个快速开发的脚手架</li><li>基于Spring Boot可以快速地开发微服务</li><li>约定大于配置</li></ul></li><li><p>Spring Cloud</p><ul><li>是基于Spring Boot实现的</li></ul><p>   现在大多数公司都在使用Spring Boot进行快速开发，学习Spring Boot的前提，需要完全掌握Spring以及Spring MVC</p><p>  弊端：发展太久之后，违背了原来的理念，配置十分繁琐。</p></li></ul><h3 id="2-IOC理论"><a href="#2-IOC理论" class="headerlink" title="2 IOC理论"></a>2 IOC理论</h3><pre><code>1.UserDao接口2.UerDaoImpl实现类3.UserService业务接口4.UserServiceImpl业务实现类</code></pre><p>在之前的业务中，用户的需求可能会影响原来的代码，哦我们可能需要根据用户的需求，去修改原来的代码，如果原来程序的代码量十分大，修改代码的代价也会很大。</p><p>我们使用一个Set接口实现，已经发生革命性的变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> UserDao userDao;<br><br><span class="hljs-comment">//利用set进行动态实现值得注入</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span></span>&#123;<br>    <span class="hljs-keyword">this</span>.userDao=userDao;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>之前程序主动创建对象，控制权在程序猿手上</li><li>使用了set注入后，程序不再具有主动性，而是变成了被动地接收对象</li></ul><p>这种思想，从本质上解决了问题，程序猿不再用管理对象的创建了。系统的耦合性大大降低，可以更加专注地实现业务。</p><p>这就是IOC的原型。</p><h4 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h4><pre><code>控制反转IOC,是一种设计思想，DI(依赖注入)是实现IOC的一种方式。在没有IOC的程序中，我们使用面向对象变成，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制。控制反转后，对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</code></pre><h4 id="Spring中的控制反转"><a href="#Spring中的控制反转" class="headerlink" title="Spring中的控制反转"></a>Spring中的控制反转</h4><p><strong>控制</strong>：谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的，使用Spring后，对象是由Spring 来创建的。</p><p><strong>反转</strong>：程序本身不创建对象，而变成被动地接收对象</p><p><strong>依赖注入</strong>：就是利用set方法来进行注入地</p><p>IOC是一种变成思想，由主动的编程变成被动地接收对象</p><p>可以通过newClassPathXmlApplicationContext去浏览一下底层源码</p><h4 id="Hello-Spring中的有关问题："><a href="#Hello-Spring中的有关问题：" class="headerlink" title="Hello Spring中的有关问题："></a>Hello Spring中的有关问题：</h4><ul><li><p>hello对象是谁创建的？</p><p>hello对象是由Spring创建的</p></li><li><p>Hello对象的属性如何设置？</p><p>hello对象的属性由Spring容器设置</p></li></ul><h3 id="4-IoC创建对象的方式"><a href="#4-IoC创建对象的方式" class="headerlink" title="4 IoC创建对象的方式"></a>4 IoC创建对象的方式</h3><pre><code>1.默认：使用无参构造创建对象2.假设我们要使用有参构造创建对象:    1.下标赋值</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--下标赋值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;派大星&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code>    2.参数类型匹配(不建议使用)</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--通过类型创建--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;派大星&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code>    3.直接通过参数名来设置</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--通过参数名来设置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;珊迪&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总结：在配置文件加载的时候，文件中管理的对象就已经初始化了！</p><h2 id="Spring-配置"><a href="#Spring-配置" class="headerlink" title="Spring 配置"></a>Spring 配置</h2><h3 id="5-1-别名（alias）"><a href="#5-1-别名（alias）" class="headerlink" title="5.1 别名（alias）"></a>5.1 别名（alias）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--如果添加了别名，也可以通过别名获取对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;userNew&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-Bean的配置"><a href="#5-2-Bean的配置" class="headerlink" title="5.2 Bean的配置"></a>5.2 Bean的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        id:bean是唯一的标识符，也是相当于我们学的对象名</span><br><span class="hljs-comment">        class:bean对象所对应的全限定名：包名+类名</span><br><span class="hljs-comment">        name:也是别名,且同时可以取多个别名</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.UserT&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user2,u3,u4&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-3-Import"><a href="#5-3-Import" class="headerlink" title="5.3 Import"></a>5.3 Import</h3><p>这个import将多个配置文件导入合并为一个</p><p>假设项目中有多个人开发，这3个人负责不同的类开发，不同的类注册在不同的bean中，我们可以利用import，将所有人的beans.xml合并为一个总的，使用的时候，直接使用总的配置就行了。(合作开发使用)</p><ul><li>张三</li><li>李四</li><li>王五</li><li>appliactionContext.xml</li></ul><h2 id="6-DI依赖注入"><a href="#6-DI依赖注入" class="headerlink" title="6 DI依赖注入"></a>6 DI依赖注入</h2><h3 id="6-1-构造器注入"><a href="#6-1-构造器注入" class="headerlink" title="6.1 构造器注入"></a>6.1 构造器注入</h3><p>前面已经说过了</p><h3 id="6-2-SET方式注入【重点】"><a href="#6-2-SET方式注入【重点】" class="headerlink" title="6.2 SET方式注入【重点】"></a>6.2 SET方式注入【重点】</h3><ul><li><p>依赖注入：Set注入！</p><ul><li><p>依赖：bean对象的创建依赖于容器</p></li><li><p>注入：bean对象中的所有属性，由容器来注入</p></li></ul></li></ul><p>【环境搭建】</p><p>1.复杂类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.真实测试对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span>  String name;<br>    <span class="hljs-keyword">private</span> Address address;<br>    <span class="hljs-keyword">private</span> String [] books;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; hobbys;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; card;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; games;<br>    <span class="hljs-keyword">private</span> Properties info;<br>    <span class="hljs-keyword">private</span> String wife;<br>    <br>    ...getter/setter<br>&#125;<br></code></pre></td></tr></table></figure><p>3.beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第一种，普通值注入，使用value--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;派大星&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext context=<span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        Student student = (Student) context.getBean(<span class="hljs-string">&quot;student&quot;</span>);<br>        System.out.println(student.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完善注入信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Address&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;武汉&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--第一种，普通值注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;派大星&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!--第二种 bean注入，使用ref注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!--数组注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼名<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三国演绎<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--List注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbys&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>听歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>敲代码<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>看电影<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--map注入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;身份证&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;银行卡&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;321&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--set--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>LOL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>COC<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>BOB<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--空值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--Properties</span><br><span class="hljs-comment">            key=value</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;driver&quot;</span>&gt;</span>20190525<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>男性<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>小明<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="10-代理模式"><a href="#10-代理模式" class="headerlink" title="10 代理模式"></a>10 代理模式</h2><p>为什么要学代理模式？因为这就是Spring AOP的底层实现</p><p>代理模式的分类</p><ul><li>静态代理</li><li>动态代理</li></ul><h3 id="10-1-静态代理"><a href="#10-1-静态代理" class="headerlink" title="10.1 静态代理"></a>10.1 静态代理</h3><p>角色分析</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色后，我们一般会做一些附属操作</li><li>客户：访问代理对象的人！</li></ul><p>代码步骤：</p><p>1.接口</p><p>2.真实角色</p><p>3.代理角色</p><p>4.客户端访问代理角色</p><p>代理模式的好处：</p><ul><li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li><li>公共也就交给代理角色，实现了业务的分工</li><li>公共业务发生拓展的时候，方便集中管理</li></ul><p>缺点：</p><ul><li>一个真实角色就需要写一个代理角色，代码量会翻倍，开发效率会变低</li></ul><h3 id="10-2-动态代理"><a href="#10-2-动态代理" class="headerlink" title="10.2 动态代理"></a>10.2 动态代理</h3><ul><li>动态代理和静态代理角色一样</li><li>动态代理类是动态生成的，不是我们直接写好的</li><li>动态代理分为两大类：基于接口的动态代理、基于类的动态代理<ul><li>基于接口：JDK的动态代理</li><li>基于类：cglib</li><li>java字节码实现：JAVAssist</li></ul></li></ul><p>需要了解两个类：Proxy：代理,InvocationHandler：调用处理程序</p><h2 id="11-AOP"><a href="#11-AOP" class="headerlink" title="11.AOP"></a>11.AOP</h2><h3 id="使用spring实现AOP"><a href="#使用spring实现AOP" class="headerlink" title="使用spring实现AOP"></a>使用spring实现AOP</h3><p><strong>首先需要导入一个包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis学习笔记</title>
    <link href="/2021/07/19/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/19/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-学习笔记"><a href="#Mybatis-学习笔记" class="headerlink" title="Mybatis 学习笔记"></a>Mybatis 学习笔记</h1><h4 id="一个基础Mybatis程序的搭建过程"><a href="#一个基础Mybatis程序的搭建过程" class="headerlink" title="一个基础Mybatis程序的搭建过程"></a>一个基础Mybatis程序的搭建过程</h4><ul><li>1.搭建环境</li><li>2.导入Mybatis</li><li>3.编写代码</li><li>4.测试</li></ul><h2 id="一-DEMO1"><a href="#一-DEMO1" class="headerlink" title="一.DEMO1"></a>一.DEMO1</h2><h3 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1.搭建环境"></a>1.搭建环境</h3><pre><code>1.搭建数据库环境2.新建Maven项目3.创建子工程4.导入Maven依赖    如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中：</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x.x<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-导入Mybatis"><a href="#2-导入Mybatis" class="headerlink" title="2.导入Mybatis"></a>2.导入Mybatis</h3><pre><code>1.在src/main/resources目录下创建mybatis-config.xml   这个XML中包含了对 MyBatis 系统的核心设置，包括获取数据库连接实例的数据源（DataSource）以及决定事务作用域和控制方式的事务管理器（TransactionManager)</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">  <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/xxx/dao/XxxMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里需要注意</p><ul><li><p>XML文件尽量不要使用中文注释，否则在运行时可能报错</p></li><li><p>driver,url,username,password 和传统的JDBC访问方式一致</p></li><li><p>每一个mapper.xml都需要在mybatis-config.xml核心配置文件中注册</p></li></ul><h3 id="3-编写mybatis工具类"><a href="#3-编写mybatis工具类" class="headerlink" title="3.编写mybatis工具类"></a>3.编写mybatis工具类</h3><pre><code>1.获取SqlSessionFactory对象 为了确保项目初始就能加载mybatis，可以在包(org.xxx.util)下建立MybatisUtil类,并建立静态域</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span>&#123;<br>        String resource=<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;    <span class="hljs-comment">//在resources下的文件可以直接读取到</span><br>        InputStream inputStream=Resources.getResourceAsStream(resource); <span class="hljs-comment">//将XML加载成流</span><br>        SqlSessionFactory sqlsessionFactory =<span class="hljs-keyword">new</span> SqlSessionFactroyBuilder().bulid(inputStream);  <span class="hljs-comment">//SqlSessionFactory需要在后期提升作用域</span><br>    &#125;<br></code></pre></td></tr></table></figure><pre><code>2.从SqlSessionFactroy中获取SqlSession  有了SqlSessionFactory之后，就能获取SqlSession实例了    SqlSession完全包含了面向数据执行SQL命令的所有方法，可以通过SqlSession实例来执行已映射的SQL语句。    在MybatisUtil下</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlsession =sqlSessionFactroy.openSession();<br>        <span class="hljs-keyword">return</span> sqlsession;<br>    &#125;<br></code></pre></td></tr></table></figure><p>3.编写代码<br>    (1) 在包org.xxx.pojo下创建User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>    <span class="hljs-comment">/*generate constructor,getter,setter*/</span><br>    xx<br>&#125;<br></code></pre></td></tr></table></figure><p>   (2)在org.xxx.mapper下创建接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span></span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br><br>&#125;  <br></code></pre></td></tr></table></figure><p>   (3)  接口实现类由原来的UserDaoImpl转化为一个Mapper配置文件</p><pre><code>     在org.xxx.dao下创建UserMapper.xml:</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">            <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">            <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.xxx.dao.userDao&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.xxx.pojo.User&quot;</span>&gt;</span><br>        select * from Blog where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>，在由于maven的约定大于配置，所以我们可能遇到配置文件无法导出或者生效的问题，解决方案：<br>      在bulid中<strong>手动配置</strong>资源过滤，来防止资源导出失败(放置于pom.xml中)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="关于增删查改"><a href="#关于增删查改" class="headerlink" title="关于增删查改"></a>关于增删查改</h2><h4 id="1-namespace"><a href="#1-namespace" class="headerlink" title="1.namespace"></a>1.namespace</h4><p>  namespace中的包名要和Dao/Mapper接口的包名一致</p><h4 id="2-SELECT"><a href="#2-SELECT" class="headerlink" title="2.SELECT"></a>2.SELECT</h4><p>选择，查询语句：</p><ul><li>id：就是对应的 namespace中的方法名</li><li>resultType:SQL查询语句的返回值</li><li>parameterType:参数类型！</li></ul><p>步骤：</p><pre><code>1.编写接口</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure><pre><code>2.编写对应mapper中的sql语句</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;getUserList&quot;</span> resultType=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;<br>    select * from user<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><pre><code>3.测试</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br>    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);<br><br>    List&lt;User&gt; userList = userMapper.getUserList();<br><br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>        System.out.println(user);<br>    &#125;<br><br>    sqlSession.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-INSERT"><a href="#3-INSERT" class="headerlink" title="3.INSERT"></a>3.INSERT</h3><h3 id="4-UPDATE"><a href="#4-UPDATE" class="headerlink" title="4.UPDATE"></a>4.UPDATE</h3><h3 id="5-DELETE"><a href="#5-DELETE" class="headerlink" title="5.DELETE"></a>5.DELETE</h3><p><strong>注意：</strong></p><p><strong>1.增删改需要commit事务</strong></p><p><strong>2.resource绑定mapper需要使用路径！</strong></p><p><strong>3.输出的中文xml中存在乱码问题</strong></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础算法</title>
    <link href="/2021/07/19/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    <url>/2021/07/19/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1. 数据结构"></a>1. 数据结构</h2><h3 id="1-1-链表"><a href="#1-1-链表" class="headerlink" title="1.1 链表"></a>1.1 链表</h3><h4 id="1-1-1-单链表"><a href="#1-1-1-单链表" class="headerlink" title="1.1.1 单链表"></a>1.1.1 单链表</h4><p><a href="https://www.acwing.com/problem/content/description/828/">Acwing 826. 单链表</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> idx,head;<br><span class="hljs-keyword">int</span> e[N], ne[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>idx = <span class="hljs-number">0</span>;<br>head = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">//表示向链表头插入一个数 x。</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_to_head</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>e[idx] = x;<br>ne[idx] = head;<br>head = idx++;<br>&#125;<br><br><span class="hljs-comment">//表示在第 k 个插入的数后面插入一个数 x（此操作中 k 均大于 0）</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>e[idx] = x;<br>ne[idx] = ne[k];<br>ne[k] = idx++;<br>&#125;<br><br><span class="hljs-comment">//表示删除第 k 个插入的数后面的数（当 k 为 0 时，表示删除头结点）。</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>ne[k] = ne[ne[k]];<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">H x，表示向链表头插入一个数 x。</span><br><span class="hljs-comment">D k，表示删除第 k 个插入的数后面的数（当 k 为 0 时，表示删除头结点）。</span><br><span class="hljs-comment">I k x，表示在第 k 个插入的数后面插入一个数 x（此操作中 k 均大于 0）。</span><br><span class="hljs-comment">*/</span><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">int</span> m;<br>cin &gt;&gt; m;<br><br><span class="hljs-keyword">while</span> (m--)<br>&#123;<br><span class="hljs-keyword">char</span> cmd;<br>cin &gt;&gt; cmd;<br><span class="hljs-keyword">if</span> (cmd == <span class="hljs-string">&#x27;H&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">int</span> a;<br>cin &gt;&gt; a;<br><span class="hljs-built_in">add_to_head</span>(a);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd == <span class="hljs-string">&#x27;I&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">int</span> k, x;<br>cin &gt;&gt; k &gt;&gt; x;<br><span class="hljs-built_in">insert</span>(k - <span class="hljs-number">1</span>, x);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd == <span class="hljs-string">&#x27;D&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">int</span> k;<br>cin &gt;&gt; k;<br><span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>)<br>head = ne[head]; <span class="hljs-comment">//删除头节点</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">remove</span>(k - <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head; i != <span class="hljs-number">-1</span>; i = ne[i])<br>&#123;<br>cout &lt;&lt; e[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>踩过的坑</strong></p><ol><li>I和D操作的是 <code>第k个被插入的数的后面</code>，而不是<code>删除第k个节点</code>。</li><li>遍历单链表时 <code>i!=-1</code>为循环条件，<del>不是<code>ne[i]!=-1</code></del></li></ol><h4 id="1-1-2-双链表"><a href="#1-1-2-双链表" class="headerlink" title="1.1.2 双链表"></a>1.1.2 双链表</h4><p><a href="https://www.acwing.com/problem/content/description/829/">827. 双链表</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> e[N], l[N], r[N];<br><span class="hljs-keyword">int</span> idx;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//0,1分别为头节点和尾节点</span><br>l[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>r[<span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>;<br>r[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>l[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>idx = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">//在下标为k的点的右边加入点x</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>e[idx] = x;<br>l[idx] = k;<br>r[idx] = r[k];<br>l[r[k]] = idx;<br>r[k] = idx++;<br>&#125;<br><br><span class="hljs-comment">//将下标为k的节点删除</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>r[l[k]] = r[k];<br>l[r[k]] = l[k];<br>&#125;<br><br><span class="hljs-comment">//向头部添加节点x</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_to_head</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>e[idx] = x;<br>l[idx] = <span class="hljs-number">0</span>;<br>r[idx] = r[<span class="hljs-number">0</span>];<br>l[r[idx]] = idx;<br>r[<span class="hljs-number">0</span>] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_to_back</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>e[idx] = x;<br>r[idx] = <span class="hljs-number">1</span>;<br>l[idx] = l[<span class="hljs-number">1</span>];<br>r[l[idx]] = idx;<br>l[<span class="hljs-number">1</span>] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">while</span> (n--)<br>&#123;<br><span class="hljs-keyword">char</span> cmd[<span class="hljs-number">3</span>];<br>cin &gt;&gt; cmd;<br><span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;R&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">int</span> x;<br>cin &gt;&gt; x;<br><span class="hljs-built_in">add_to_back</span>(x);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;L&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">int</span> x;<br>cin &gt;&gt; x;<br><span class="hljs-built_in">add_to_head</span>(x);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;D&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">int</span> k;<br>cin &gt;&gt; k;<br><span class="hljs-built_in">remove</span>(k + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;L&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">int</span> k, x;<br>cin &gt;&gt; k &gt;&gt; x;<br><span class="hljs-built_in">add</span>(l[k + <span class="hljs-number">1</span>], x);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;R&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">int</span> k, x;<br>cin &gt;&gt; k &gt;&gt; x;<br><span class="hljs-built_in">add</span>(k + <span class="hljs-number">1</span>, x);<br>&#125;<br>&#125;<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = r[<span class="hljs-number">0</span>]; i != <span class="hljs-number">1</span>; i = r[i])<br>cout &lt;&lt; e[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>踩过的坑</strong></p><ol><li><p>题目中第 k 个插入的数并不是指当前链表的第 k 个节点，而是下标为 <code>k+1</code> 的数</p></li><li><p>遍历双链表和遍历单链表的条件不一样</p><ul><li><p>单链表的遍历：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head; i != <span class="hljs-number">-1</span>; i = ne[i])<br></code></pre></td></tr></table></figure></li><li><p>双链表的遍历:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = r[<span class="hljs-number">0</span>];i != <span class="hljs-number">1</span>;i = r[i])<br></code></pre></td></tr></table></figure></li><li><p>之所以存在这样的不同，是因为前者不存在尾节点，而后者存在尾节点</p><ul><li>单链表在指针为 <code>-1</code> 时达到链表尾</li><li>双链表在指针指向 <code>尾节点地址</code>时，达到链表尾</li></ul></li></ul></li><li><p>插入操作需要改变4个指针的指向，可以通过画图捋清楚</p></li></ol><h3 id="1-2-栈"><a href="#1-2-栈" class="headerlink" title="1.2 栈"></a>1.2 栈</h3><h4 id="1-2-1-单调栈"><a href="#1-2-1-单调栈" class="headerlink" title="1.2.1 单调栈"></a>1.2.1 单调栈</h4><p><a href="https://www.acwing.com/problem/content/832/">830. 单调栈 </a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> q[N];<br><br><span class="hljs-keyword">int</span> stk[N];<br><span class="hljs-keyword">int</span> tt;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q[i]);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">while</span> (tt != <span class="hljs-number">0</span> &amp;&amp; stk[tt] &gt;= q[i])<br>tt--;<br><span class="hljs-keyword">if</span> (tt == <span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1 &quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, stk[tt]);<br><br>stk[++tt] = q[i];<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是栈的一个典型应用，代码特别优雅</p><p>原理可以参考下图</p><p><img src="https://img-blog.csdnimg.cn/20201211221031165.gif#pic_center" alt="在这里插入图片描述"></p><h3 id="1-3-队列"><a href="#1-3-队列" class="headerlink" title="1.3 队列"></a>1.3 队列</h3><h4 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h4><p><a href="https://www.acwing.com/problem/content/156/">154. 滑动窗口</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++">-----<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">int</span> q[N], a[N];<br><span class="hljs-keyword">int</span> n, k;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><br><span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-comment">//维护队列</span><br><span class="hljs-keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="hljs-number">1</span> &gt; q[hh]) <span class="hljs-comment">//队列是空的并且 开始的位置&gt;q[hh]</span><br>hh++;<br><span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &gt; a[i])<br>tt--;<br><br><span class="hljs-keyword">if</span> (i &gt;= k - <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a[q[hh]]);<br>q[++tt] = i;<br>&#125;<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-KMP"><a href="#1-4-KMP" class="headerlink" title="1.4 KMP"></a>1.4 KMP</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>, M = <span class="hljs-number">1000010</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">char</span> p[N], s[M];<br><span class="hljs-keyword">int</span> ne[N];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//下标从1开始</span><br>cin &gt;&gt; n &gt;&gt; p + <span class="hljs-number">1</span> &gt;&gt; m &gt;&gt; s + <span class="hljs-number">1</span>;<br><br><br><span class="hljs-comment">//求next数组 next1 不用算</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span> (p[i] == p[j + <span class="hljs-number">1</span>]) j++;<br>ne[i] = j;<br>&#125;<br><br><span class="hljs-comment">//kmp匹配过程 </span><br><br><span class="hljs-comment">//s串从1 开始，p从0开始 （试图和si 匹配的是 pj+1 所以 j 总是往前错一位）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= m; i++)<br>&#123;<br><span class="hljs-comment">//没有匹配上 并且 j 还有路可退时  j=ne[j]</span><br><span class="hljs-keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>])  <br>j = ne[j];<br><br><span class="hljs-comment">//匹配上了，那么 j++</span><br><span class="hljs-keyword">if</span> (s[i] == p[j + <span class="hljs-number">1</span>])  j++;<br><br><span class="hljs-keyword">if</span> (j == n)<br>&#123;<br><span class="hljs-comment">//匹配成功</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i - n);<br>j = ne[j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-图论"><a href="#2-图论" class="headerlink" title="2. 图论"></a>2. 图论</h2><h3 id="先导知识"><a href="#先导知识" class="headerlink" title="先导知识"></a>先导知识</h3><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><h3 id="2-1-Dijkstra"><a href="#2-1-Dijkstra" class="headerlink" title="2.1 Dijkstra"></a>2.1 Dijkstra</h3><h4 id="2-1-1-朴素Dijkstra"><a href="#2-1-1-朴素Dijkstra" class="headerlink" title="2.1.1 朴素Dijkstra"></a>2.1.1 朴素Dijkstra</h4><p>针对稠密图，使用邻接矩阵</p><p>时间复杂度 O( n2 )</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">510</span>;<br><br><span class="hljs-keyword">int</span> n, m;<span class="hljs-comment">//点数和边数</span><br><span class="hljs-keyword">int</span> g[N][N];<br><span class="hljs-keyword">int</span> dist[N];<span class="hljs-comment">//存每个点的最短距离</span><br><span class="hljs-keyword">bool</span> st[N];<span class="hljs-comment">//每个点的最短路是不是已经确定了</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-comment">//找到没有确定最短路长的点之中的距离最短的那一个</span><br><span class="hljs-keyword">int</span> t = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br><span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<span class="hljs-comment">//在st=false的点中，找到dist最小的点</span><br>t = j;<br><br><span class="hljs-comment">//if (t == n) break;</span><br><br>st[t] = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//用找到的点更新其它点的最短距离</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>dist[j] = <span class="hljs-built_in">min</span>(dist[j], dist[t]+g[t][j]);<br>&#125;<br><br><span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> dist[n];<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-comment">/*由于存在重边和自环*/</span><br><span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> g);<br><span class="hljs-keyword">while</span> (m--)<br>&#123;<br><span class="hljs-keyword">int</span> a, b, c;<br>cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>g[a][b] = <span class="hljs-built_in">min</span>(g[a][b], c);<br>&#125;<br><br><span class="hljs-keyword">int</span> t = <span class="hljs-built_in">dijkstra</span>();<br>cout &lt;&lt; t;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>踩过的坑：</strong></p><ol><li><p>Dijkstra中的 n 次循环，用于计数，因为每次循环可以确定一个点的最短路，所以需要循环n次</p></li><li><p>进入循环后，首先找到  <code>没有确定最短距离的点</code>中 <code>dist</code>值最小的点，即：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">t = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br><span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[j] &lt; dist[t]))<br>t = j;<br></code></pre></td></tr></table></figure><p>将这个点 t 确定为距离最短的点后，利用这个点更新其它点的距离</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">st[t] = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>    dist[j]=<span class="hljs-built_in">min</span>(dist[j],dist[t]+g[t][j]);<br></code></pre></td></tr></table></figure></li><li><p>注意Dijkstra的初始化条件</p><ul><li>将 <code>dist</code> 数组初始化为 0x3f3f3f3f</li><li>从 1号 点开始拓展，就将 <code>dist[1] </code>初始化为 0</li></ul></li></ol><h4 id="2-1-2-堆优化版Dijkstra"><a href="#2-1-2-堆优化版Dijkstra" class="headerlink" title="2.1.2 堆优化版Dijkstra"></a>2.1.2 堆优化版Dijkstra</h4><p>堆可以使用 手写堆 mlogn 或者 优先队列 mlogm</p><p>一般不需要手写堆</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>基础算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT_ADV中的常见英文</title>
    <link href="/2021/07/19/PAT-ADV%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E8%8B%B1%E6%96%87/"/>
    <url>/2021/07/19/PAT-ADV%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E8%8B%B1%E6%96%87/</url>
    
    <content type="html"><![CDATA[<p>occupy占用<br>Product of Polynomials 多项式乘积<br>nonzero terms in the polynomial 多项式中的非零项<br>exponents 指数<br>coefficients 系数<br>respectively 分别的<br>product of A and B 乘积<br>be accurate up to 1 decimal place.  精确到1位小数<br>commas 逗号<br>rank 排名<br>evaluate 评估<br>is occupied by 被占领<br>grids 网格<br>postorder sequence 后序遍历<br>inorder sequence 中序遍历<br>the level order traversal sequence 层序遍历<br>count for 计算<br>symmetric  对称<br>simulate 模拟<br>swap 交换<br>scattered 四散的；散落的<br>vertices 顶点<br>least 最小的；最少的<br>even 偶数的<br>undirected graph 无向图<br>clique 团<br>maximal clique 最大连通分量<br>adjacent 相邻<br>threshold 起点<br>forward 转发<br>tie 并列<br>factorization 因式分解<br>denoting 表示，象征<br>toll 长途电话费<br>chronologically 按年代的，按时间顺序的<br>provided 假设<br>net worth 净资产<br>non-increasing order 降序<br>non-decreasing order 升序<br>lower bound 下界<br>qualified grades 合格品<br>the higher line of qualification 更高的资格线<br>exceeded 超过的<br>quota 定量<br>interval 区间<br>duplication 复制；副本<br>Palindromic 回文的<br>terminated 终止的；终结<br>alphanumerical 字母数字的<br>lexicographically 词典学上的<br>case insensitive 不区分大小写的<br>testees 参赛者<br>test site 考场</p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAT_ADV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建</title>
    <link href="/2021/07/19/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/07/19/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo搭建博客的历程"><a href="#Hexo搭建博客的历程" class="headerlink" title="Hexo搭建博客的历程"></a>Hexo搭建博客的历程</h1><p>一直以来我都在使用csdn博客写刷题笔记，虽说博客重在内容而不是形式，但是csdn主题过于一言难尽，而且风评较差，但是平时太懒，就一直没管。</p><p>刚好昨天夜晚没有睡好，以今天的精力学算法是没戏了，于是跟着网上的教程搭建个人博客。</p><p>首先尝试了Hugo，捣鼓半天之后，发现很多复杂的主题需要来自境外的源文件，国内网络访问的体验实在是一言难尽，而且感觉Hugo的生态比较一般。</p><p>然后又尝试了Hexo框架，跟着Codesheep的视频做，居然一次就成功了。</p><p>下面简单总结一下Hexo部署博客的流程：</p><h3 id="1-软件环境"><a href="#1-软件环境" class="headerlink" title="1. 软件环境"></a>1. 软件环境</h3><ol><li>Git （包含了Git Bash终端）</li><li>Node.js （包含了npm工具，npm工具需要配置国内的淘宝镜像）</li></ol><h3 id="2-安装流程"><a href="#2-安装流程" class="headerlink" title="2. 安装流程"></a>2. 安装流程</h3><p>cmd可能出现问题，我全程使用了Git Bash终端</p><ol><li><p>安装Hexo</p><p><code>cnmp install -g hexo -cli</code></p></li><li><p>初始化hexo</p><p><code>hexo init myblog</code></p><p>这里的<code>myblog</code>可以任意取名字</p><p>在初始化完成的目录下，包含了以下文件夹</p><ul><li>node_modules</li><li>public 存放生成的文件</li><li>source 用于存放文章</li><li>themes 主题</li><li>_config.yml 配置文件</li></ul></li><li><p>生成博客</p><p><code>hexo g</code></p></li><li><p>启动预览</p><p><code>hexo server</code></p></li><li><p>将博客添加到Github/Gitee仓库</p><p>Gitee page入口暂时找不到，据说是在整改，9月份能上线</p><p>步骤如下：</p><ul><li><p>更改<code>_config.yml</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/xx/xx.github.io.git</span><br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>这里有一个坑，每一个<code>:</code>后面都需要有空格，不然在提交时会报错</p></li><li><p>执行命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo h</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><p>成功之后，就能通过github/gitee的连接进入了</p><h3 id="3-进一步优化"><a href="#3-进一步优化" class="headerlink" title="3. 进一步优化"></a>3. 进一步优化</h3><h4 id="3-1-更换主题"><a href="#3-1-更换主题" class="headerlink" title="3.1 更换主题"></a>3.1 更换主题</h4><p>hexo的官方主题站：<a href="https://hexo.io/themes/">Themes | Hexo</a></p><ol><li><p>定位到博客目录</p></li><li><p>克隆主题</p><p><code>git clone https://github.com/xx/x-x-x</code></p></li><li><p>编辑站点根目录下的<code>_config.yml</code>文件，并将主题设为insulin(即解压后的文件夹名)</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术内容</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello</title>
    <link href="/2021/07/19/hello-world/"/>
    <url>/2021/07/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>这是我的第一篇托管在Github上的博客<br>以后的博客会尽量在这里更新，<br>CSDN上的内容也会陆续转移到这里。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
